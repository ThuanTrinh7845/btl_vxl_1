
BTL_VXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004098  08004098  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004098  08004098  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004098  08004098  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080040a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000024  080040c4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080040c4  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114d3  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025bb  00000000  00000000  00031520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00033ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00034830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e1e  00000000  00000000  00035478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011344  00000000  00000000  0004e296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af26  00000000  00000000  0005f5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea500  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a0  00000000  00000000  000ea554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08004054 	.word	0x08004054

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08004054 	.word	0x08004054

0800014c <buttonIsPressed>:
int TimerPress[MAX_BUTTON] = {100, 100, 100};

int buttonFlag[MAX_BUTTON] = {0, 0, 0};

int buttonIsPressed(int index)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (buttonFlag[index] == 1)
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <buttonIsPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <buttonIsPressed+0x22>
	{
		buttonFlag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <buttonIsPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <buttonIsPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000070 	.word	0x20000070

08000180 <subKeyProcess>:

void subKeyProcess(int index)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	buttonFlag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000070 	.word	0x20000070

080001a0 <getKeyInput>:

void getKeyInput()
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0

	for (int i = 0; i < MAX_BUTTON; i++)
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e074      	b.n	8000296 <getKeyInput+0xf6>
	{
		keyReg0[i] = keyReg1[i];
 80001ac:	4a3e      	ldr	r2, [pc, #248]	; (80002a8 <getKeyInput+0x108>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493d      	ldr	r1, [pc, #244]	; (80002ac <getKeyInput+0x10c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001bc:	4a3c      	ldr	r2, [pc, #240]	; (80002b0 <getKeyInput+0x110>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4938      	ldr	r1, [pc, #224]	; (80002a8 <getKeyInput+0x108>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		keyReg2[0] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 80001cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d0:	4838      	ldr	r0, [pc, #224]	; (80002b4 <getKeyInput+0x114>)
 80001d2:	f001 f88d 	bl	80012f0 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b35      	ldr	r3, [pc, #212]	; (80002b0 <getKeyInput+0x110>)
 80001dc:	601a      	str	r2, [r3, #0]
		keyReg2[1] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001de:	2101      	movs	r1, #1
 80001e0:	4835      	ldr	r0, [pc, #212]	; (80002b8 <getKeyInput+0x118>)
 80001e2:	f001 f885 	bl	80012f0 <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <getKeyInput+0x110>)
 80001ec:	605a      	str	r2, [r3, #4]
		keyReg2[2] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001ee:	2102      	movs	r1, #2
 80001f0:	4831      	ldr	r0, [pc, #196]	; (80002b8 <getKeyInput+0x118>)
 80001f2:	f001 f87d 	bl	80012f0 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b2d      	ldr	r3, [pc, #180]	; (80002b0 <getKeyInput+0x110>)
 80001fc:	609a      	str	r2, [r3, #8]

		if ((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80001fe:	4a2b      	ldr	r2, [pc, #172]	; (80002ac <getKeyInput+0x10c>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4928      	ldr	r1, [pc, #160]	; (80002a8 <getKeyInput+0x108>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d13e      	bne.n	8000290 <getKeyInput+0xf0>
 8000212:	4a25      	ldr	r2, [pc, #148]	; (80002a8 <getKeyInput+0x108>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	4925      	ldr	r1, [pc, #148]	; (80002b0 <getKeyInput+0x110>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d134      	bne.n	8000290 <getKeyInput+0xf0>
		{
			if (keyReg2[i] != keyReg3[i])
 8000226:	4a22      	ldr	r2, [pc, #136]	; (80002b0 <getKeyInput+0x110>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	4923      	ldr	r1, [pc, #140]	; (80002bc <getKeyInput+0x11c>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000236:	429a      	cmp	r2, r3
 8000238:	d016      	beq.n	8000268 <getKeyInput+0xc8>
			{
				keyReg3[i] = keyReg2[i];
 800023a:	4a1d      	ldr	r2, [pc, #116]	; (80002b0 <getKeyInput+0x110>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000242:	491e      	ldr	r1, [pc, #120]	; (80002bc <getKeyInput+0x11c>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (keyReg2[i] == PRESSED_STATE)
 800024a:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <getKeyInput+0x110>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000252:	2b01      	cmp	r3, #1
 8000254:	d11c      	bne.n	8000290 <getKeyInput+0xf0>
				{
					subKeyProcess(i);
 8000256:	6878      	ldr	r0, [r7, #4]
 8000258:	f7ff ff92 	bl	8000180 <subKeyProcess>
					TimerPress[i] = 100;
 800025c:	4a18      	ldr	r2, [pc, #96]	; (80002c0 <getKeyInput+0x120>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2164      	movs	r1, #100	; 0x64
 8000262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000266:	e013      	b.n	8000290 <getKeyInput+0xf0>
				}
			}
			else
			{
				TimerPress[i]--;
 8000268:	4a15      	ldr	r2, [pc, #84]	; (80002c0 <getKeyInput+0x120>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000270:	1e5a      	subs	r2, r3, #1
 8000272:	4913      	ldr	r1, [pc, #76]	; (80002c0 <getKeyInput+0x120>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerPress[i] <= 0)
 800027a:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <getKeyInput+0x120>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	dc04      	bgt.n	8000290 <getKeyInput+0xf0>
				{
					keyReg3[i] = NORMAL_STATE;
 8000286:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <getKeyInput+0x11c>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2100      	movs	r1, #0
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3301      	adds	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b02      	cmp	r3, #2
 800029a:	dd87      	ble.n	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	2000004c 	.word	0x2000004c
 80002ac:	20000040 	.word	0x20000040
 80002b0:	20000058 	.word	0x20000058
 80002b4:	40011000 	.word	0x40011000
 80002b8:	40010800 	.word	0x40010800
 80002bc:	20000064 	.word	0x20000064
 80002c0:	20000000 	.word	0x20000000

080002c4 <fsm_automatic_run>:
	time_buffer[0]--;
	time_buffer[1]--;
}

void fsm_automatic_run()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0

	switch(state)
 80002c8:	4b93      	ldr	r3, [pc, #588]	; (8000518 <fsm_automatic_run+0x254>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b04      	cmp	r3, #4
 80002ce:	f200 8117 	bhi.w	8000500 <fsm_automatic_run+0x23c>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_automatic_run+0x14>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	080002ed 	.word	0x080002ed
 80002dc:	08000387 	.word	0x08000387
 80002e0:	080003e3 	.word	0x080003e3
 80002e4:	08000445 	.word	0x08000445
 80002e8:	0800049f 	.word	0x0800049f
	{
		case INIT:
			HAL_GPIO_WritePin(MSB1_GPIO_Port, MSB1_Pin, 0);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2108      	movs	r1, #8
 80002f0:	488a      	ldr	r0, [pc, #552]	; (800051c <fsm_automatic_run+0x258>)
 80002f2:	f001 f814 	bl	800131e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LSB1_GPIO_Port, LSB1_Pin, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2120      	movs	r1, #32
 80002fa:	4888      	ldr	r0, [pc, #544]	; (800051c <fsm_automatic_run+0x258>)
 80002fc:	f001 f80f 	bl	800131e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(MSB2_GPIO_Port, MSB2_Pin, 0);
 8000300:	2200      	movs	r2, #0
 8000302:	2110      	movs	r1, #16
 8000304:	4885      	ldr	r0, [pc, #532]	; (800051c <fsm_automatic_run+0x258>)
 8000306:	f001 f80a 	bl	800131e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LSB2_GPIO_Port, LSB2_Pin, 0);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000310:	4882      	ldr	r0, [pc, #520]	; (800051c <fsm_automatic_run+0x258>)
 8000312:	f001 f804 	bl	800131e <HAL_GPIO_WritePin>


			if (red - (yellow + green) > 0)
 8000316:	4b82      	ldr	r3, [pc, #520]	; (8000520 <fsm_automatic_run+0x25c>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b82      	ldr	r3, [pc, #520]	; (8000524 <fsm_automatic_run+0x260>)
 800031c:	6819      	ldr	r1, [r3, #0]
 800031e:	4b82      	ldr	r3, [pc, #520]	; (8000528 <fsm_automatic_run+0x264>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	440b      	add	r3, r1
 8000324:	1ad3      	subs	r3, r2, r3
 8000326:	2b00      	cmp	r3, #0
 8000328:	dd0c      	ble.n	8000344 <fsm_automatic_run+0x80>
			{
				green += red - (yellow + green);
 800032a:	4b7d      	ldr	r3, [pc, #500]	; (8000520 <fsm_automatic_run+0x25c>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	4b7d      	ldr	r3, [pc, #500]	; (8000524 <fsm_automatic_run+0x260>)
 8000330:	6819      	ldr	r1, [r3, #0]
 8000332:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <fsm_automatic_run+0x264>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	440b      	add	r3, r1
 8000338:	1ad2      	subs	r2, r2, r3
 800033a:	4b7b      	ldr	r3, [pc, #492]	; (8000528 <fsm_automatic_run+0x264>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4413      	add	r3, r2
 8000340:	4a79      	ldr	r2, [pc, #484]	; (8000528 <fsm_automatic_run+0x264>)
 8000342:	6013      	str	r3, [r2, #0]
			}
			if (red - (yellow + green) < 0)
 8000344:	4b76      	ldr	r3, [pc, #472]	; (8000520 <fsm_automatic_run+0x25c>)
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	4b76      	ldr	r3, [pc, #472]	; (8000524 <fsm_automatic_run+0x260>)
 800034a:	6819      	ldr	r1, [r3, #0]
 800034c:	4b76      	ldr	r3, [pc, #472]	; (8000528 <fsm_automatic_run+0x264>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	440b      	add	r3, r1
 8000352:	1ad3      	subs	r3, r2, r3
 8000354:	2b00      	cmp	r3, #0
 8000356:	da06      	bge.n	8000366 <fsm_automatic_run+0xa2>
			{
				red += (yellow + green) - red;
 8000358:	4b72      	ldr	r3, [pc, #456]	; (8000524 <fsm_automatic_run+0x260>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	4b72      	ldr	r3, [pc, #456]	; (8000528 <fsm_automatic_run+0x264>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4413      	add	r3, r2
 8000362:	4a6f      	ldr	r2, [pc, #444]	; (8000520 <fsm_automatic_run+0x25c>)
 8000364:	6013      	str	r3, [r2, #0]
			}

			if (1)
			{
				setTimer(100, 1);
 8000366:	2101      	movs	r1, #1
 8000368:	2064      	movs	r0, #100	; 0x64
 800036a:	f000 fa67 	bl	800083c <setTimer>
				state = AUTO_RED_GREEN;
 800036e:	4b6a      	ldr	r3, [pc, #424]	; (8000518 <fsm_automatic_run+0x254>)
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]

				time_buffer[0] = red;
 8000374:	4b6a      	ldr	r3, [pc, #424]	; (8000520 <fsm_automatic_run+0x25c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a6c      	ldr	r2, [pc, #432]	; (800052c <fsm_automatic_run+0x268>)
 800037a:	6013      	str	r3, [r2, #0]
				time_buffer[1] = green;
 800037c:	4b6a      	ldr	r3, [pc, #424]	; (8000528 <fsm_automatic_run+0x264>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a6a      	ldr	r2, [pc, #424]	; (800052c <fsm_automatic_run+0x268>)
 8000382:	6053      	str	r3, [r2, #4]
			}
			break;
 8000384:	e0c5      	b.n	8000512 <fsm_automatic_run+0x24e>
		case AUTO_RED_GREEN:
			red_green();
 8000386:	f000 fba3 	bl	8000ad0 <red_green>

			if (timerFlag[1] == 1)
 800038a:	4b69      	ldr	r3, [pc, #420]	; (8000530 <fsm_automatic_run+0x26c>)
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d10d      	bne.n	80003ae <fsm_automatic_run+0xea>
			{
				setTimer(100, 1);
 8000392:	2101      	movs	r1, #1
 8000394:	2064      	movs	r0, #100	; 0x64
 8000396:	f000 fa51 	bl	800083c <setTimer>
				time_buffer[0]--;
 800039a:	4b64      	ldr	r3, [pc, #400]	; (800052c <fsm_automatic_run+0x268>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	3b01      	subs	r3, #1
 80003a0:	4a62      	ldr	r2, [pc, #392]	; (800052c <fsm_automatic_run+0x268>)
 80003a2:	6013      	str	r3, [r2, #0]
				time_buffer[1]--;
 80003a4:	4b61      	ldr	r3, [pc, #388]	; (800052c <fsm_automatic_run+0x268>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	3b01      	subs	r3, #1
 80003aa:	4a60      	ldr	r2, [pc, #384]	; (800052c <fsm_automatic_run+0x268>)
 80003ac:	6053      	str	r3, [r2, #4]
			}

			if (time_buffer[1] <= 0)
 80003ae:	4b5f      	ldr	r3, [pc, #380]	; (800052c <fsm_automatic_run+0x268>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	dc0a      	bgt.n	80003cc <fsm_automatic_run+0x108>
			{
				state = AUTO_RED_YELLOW;
 80003b6:	4b58      	ldr	r3, [pc, #352]	; (8000518 <fsm_automatic_run+0x254>)
 80003b8:	2202      	movs	r2, #2
 80003ba:	601a      	str	r2, [r3, #0]
				setTimer(100, 1);
 80003bc:	2101      	movs	r1, #1
 80003be:	2064      	movs	r0, #100	; 0x64
 80003c0:	f000 fa3c 	bl	800083c <setTimer>

				time_buffer[1] = yellow;
 80003c4:	4b57      	ldr	r3, [pc, #348]	; (8000524 <fsm_automatic_run+0x260>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a58      	ldr	r2, [pc, #352]	; (800052c <fsm_automatic_run+0x268>)
 80003ca:	6053      	str	r3, [r2, #4]
			}
			if (buttonIsPressed(0))
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff febd 	bl	800014c <buttonIsPressed>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	f000 8095 	beq.w	8000504 <fsm_automatic_run+0x240>
			{
				state = MAN_INIT;
 80003da:	4b4f      	ldr	r3, [pc, #316]	; (8000518 <fsm_automatic_run+0x254>)
 80003dc:	220a      	movs	r2, #10
 80003de:	601a      	str	r2, [r3, #0]
			}
			break;
 80003e0:	e090      	b.n	8000504 <fsm_automatic_run+0x240>
		case AUTO_RED_YELLOW:
			red_yellow();
 80003e2:	f000 fb91 	bl	8000b08 <red_yellow>

			if (timerFlag[1] == 1)
 80003e6:	4b52      	ldr	r3, [pc, #328]	; (8000530 <fsm_automatic_run+0x26c>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d10d      	bne.n	800040a <fsm_automatic_run+0x146>
			{
				setTimer(100, 1);
 80003ee:	2101      	movs	r1, #1
 80003f0:	2064      	movs	r0, #100	; 0x64
 80003f2:	f000 fa23 	bl	800083c <setTimer>
				time_buffer[0]--;
 80003f6:	4b4d      	ldr	r3, [pc, #308]	; (800052c <fsm_automatic_run+0x268>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	4a4b      	ldr	r2, [pc, #300]	; (800052c <fsm_automatic_run+0x268>)
 80003fe:	6013      	str	r3, [r2, #0]
				time_buffer[1]--;
 8000400:	4b4a      	ldr	r3, [pc, #296]	; (800052c <fsm_automatic_run+0x268>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	3b01      	subs	r3, #1
 8000406:	4a49      	ldr	r2, [pc, #292]	; (800052c <fsm_automatic_run+0x268>)
 8000408:	6053      	str	r3, [r2, #4]
			}
			if (time_buffer[0] <= 0)
 800040a:	4b48      	ldr	r3, [pc, #288]	; (800052c <fsm_automatic_run+0x268>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	dc0e      	bgt.n	8000430 <fsm_automatic_run+0x16c>
			{
				state = AUTO_GREEN_RED;
 8000412:	4b41      	ldr	r3, [pc, #260]	; (8000518 <fsm_automatic_run+0x254>)
 8000414:	2203      	movs	r2, #3
 8000416:	601a      	str	r2, [r3, #0]
				setTimer(100, 1);
 8000418:	2101      	movs	r1, #1
 800041a:	2064      	movs	r0, #100	; 0x64
 800041c:	f000 fa0e 	bl	800083c <setTimer>

				time_buffer[0] = green;
 8000420:	4b41      	ldr	r3, [pc, #260]	; (8000528 <fsm_automatic_run+0x264>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a41      	ldr	r2, [pc, #260]	; (800052c <fsm_automatic_run+0x268>)
 8000426:	6013      	str	r3, [r2, #0]
				time_buffer[1] = red;
 8000428:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <fsm_automatic_run+0x25c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a3f      	ldr	r2, [pc, #252]	; (800052c <fsm_automatic_run+0x268>)
 800042e:	6053      	str	r3, [r2, #4]
			}
			if (buttonIsPressed(0))
 8000430:	2000      	movs	r0, #0
 8000432:	f7ff fe8b 	bl	800014c <buttonIsPressed>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d065      	beq.n	8000508 <fsm_automatic_run+0x244>
			{
				state = MAN_INIT;
 800043c:	4b36      	ldr	r3, [pc, #216]	; (8000518 <fsm_automatic_run+0x254>)
 800043e:	220a      	movs	r2, #10
 8000440:	601a      	str	r2, [r3, #0]
			}
			break;
 8000442:	e061      	b.n	8000508 <fsm_automatic_run+0x244>
		case AUTO_GREEN_RED:
			green_red();
 8000444:	f000 fb7c 	bl	8000b40 <green_red>

			if (timerFlag[1] == 1)
 8000448:	4b39      	ldr	r3, [pc, #228]	; (8000530 <fsm_automatic_run+0x26c>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d10d      	bne.n	800046c <fsm_automatic_run+0x1a8>
			{
				setTimer(100, 1);
 8000450:	2101      	movs	r1, #1
 8000452:	2064      	movs	r0, #100	; 0x64
 8000454:	f000 f9f2 	bl	800083c <setTimer>
				time_buffer[0]--;
 8000458:	4b34      	ldr	r3, [pc, #208]	; (800052c <fsm_automatic_run+0x268>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	3b01      	subs	r3, #1
 800045e:	4a33      	ldr	r2, [pc, #204]	; (800052c <fsm_automatic_run+0x268>)
 8000460:	6013      	str	r3, [r2, #0]
				time_buffer[1]--;
 8000462:	4b32      	ldr	r3, [pc, #200]	; (800052c <fsm_automatic_run+0x268>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	3b01      	subs	r3, #1
 8000468:	4a30      	ldr	r2, [pc, #192]	; (800052c <fsm_automatic_run+0x268>)
 800046a:	6053      	str	r3, [r2, #4]
			}


			if (time_buffer[0] <= 0)
 800046c:	4b2f      	ldr	r3, [pc, #188]	; (800052c <fsm_automatic_run+0x268>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	dc0a      	bgt.n	800048a <fsm_automatic_run+0x1c6>
			{
				state = AUTO_YELLOW_RED;
 8000474:	4b28      	ldr	r3, [pc, #160]	; (8000518 <fsm_automatic_run+0x254>)
 8000476:	2204      	movs	r2, #4
 8000478:	601a      	str	r2, [r3, #0]
				setTimer(100, 1);
 800047a:	2101      	movs	r1, #1
 800047c:	2064      	movs	r0, #100	; 0x64
 800047e:	f000 f9dd 	bl	800083c <setTimer>

				time_buffer[0] = yellow;
 8000482:	4b28      	ldr	r3, [pc, #160]	; (8000524 <fsm_automatic_run+0x260>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a29      	ldr	r2, [pc, #164]	; (800052c <fsm_automatic_run+0x268>)
 8000488:	6013      	str	r3, [r2, #0]
			}
			if (buttonIsPressed(0))
 800048a:	2000      	movs	r0, #0
 800048c:	f7ff fe5e 	bl	800014c <buttonIsPressed>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d03a      	beq.n	800050c <fsm_automatic_run+0x248>
			{
				state = MAN_INIT;
 8000496:	4b20      	ldr	r3, [pc, #128]	; (8000518 <fsm_automatic_run+0x254>)
 8000498:	220a      	movs	r2, #10
 800049a:	601a      	str	r2, [r3, #0]
			}
			break;
 800049c:	e036      	b.n	800050c <fsm_automatic_run+0x248>
		case AUTO_YELLOW_RED:
			yellow_red();
 800049e:	f000 fb6b 	bl	8000b78 <yellow_red>

			if (timerFlag[1] == 1)
 80004a2:	4b23      	ldr	r3, [pc, #140]	; (8000530 <fsm_automatic_run+0x26c>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d10d      	bne.n	80004c6 <fsm_automatic_run+0x202>
			{
				setTimer(100, 1);
 80004aa:	2101      	movs	r1, #1
 80004ac:	2064      	movs	r0, #100	; 0x64
 80004ae:	f000 f9c5 	bl	800083c <setTimer>
				time_buffer[0]--;
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <fsm_automatic_run+0x268>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	4a1c      	ldr	r2, [pc, #112]	; (800052c <fsm_automatic_run+0x268>)
 80004ba:	6013      	str	r3, [r2, #0]
				time_buffer[1]--;
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <fsm_automatic_run+0x268>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	4a1a      	ldr	r2, [pc, #104]	; (800052c <fsm_automatic_run+0x268>)
 80004c4:	6053      	str	r3, [r2, #4]
			}


			if (time_buffer[0] <= 0)
 80004c6:	4b19      	ldr	r3, [pc, #100]	; (800052c <fsm_automatic_run+0x268>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	dc0e      	bgt.n	80004ec <fsm_automatic_run+0x228>
			{
				state = AUTO_RED_GREEN;
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <fsm_automatic_run+0x254>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	601a      	str	r2, [r3, #0]
				setTimer(100, 1);
 80004d4:	2101      	movs	r1, #1
 80004d6:	2064      	movs	r0, #100	; 0x64
 80004d8:	f000 f9b0 	bl	800083c <setTimer>

				time_buffer[0] = red;
 80004dc:	4b10      	ldr	r3, [pc, #64]	; (8000520 <fsm_automatic_run+0x25c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a12      	ldr	r2, [pc, #72]	; (800052c <fsm_automatic_run+0x268>)
 80004e2:	6013      	str	r3, [r2, #0]
				time_buffer[1] = green;
 80004e4:	4b10      	ldr	r3, [pc, #64]	; (8000528 <fsm_automatic_run+0x264>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a10      	ldr	r2, [pc, #64]	; (800052c <fsm_automatic_run+0x268>)
 80004ea:	6053      	str	r3, [r2, #4]

			}
			if (buttonIsPressed(0))
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff fe2d 	bl	800014c <buttonIsPressed>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d00b      	beq.n	8000510 <fsm_automatic_run+0x24c>
			{
				state = MAN_INIT;
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <fsm_automatic_run+0x254>)
 80004fa:	220a      	movs	r2, #10
 80004fc:	601a      	str	r2, [r3, #0]
			}
			break;
 80004fe:	e007      	b.n	8000510 <fsm_automatic_run+0x24c>
		default:
			break;
 8000500:	bf00      	nop
 8000502:	e006      	b.n	8000512 <fsm_automatic_run+0x24e>
			break;
 8000504:	bf00      	nop
 8000506:	e004      	b.n	8000512 <fsm_automatic_run+0x24e>
			break;
 8000508:	bf00      	nop
 800050a:	e002      	b.n	8000512 <fsm_automatic_run+0x24e>
			break;
 800050c:	bf00      	nop
 800050e:	e000      	b.n	8000512 <fsm_automatic_run+0x24e>
			break;
 8000510:	bf00      	nop
	}

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000007c 	.word	0x2000007c
 800051c:	40010c00 	.word	0x40010c00
 8000520:	2000000c 	.word	0x2000000c
 8000524:	20000014 	.word	0x20000014
 8000528:	20000010 	.word	0x20000010
 800052c:	200000d0 	.word	0x200000d0
 8000530:	200000a8 	.word	0x200000a8

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fb60 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f826 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000540:	f000 f88e 	bl	8000660 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000544:	f000 f8d8 	bl	80006f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000548:	f000 f85c 	bl	8000604 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <main+0x4c>)
 800054e:	f003 f9b3 	bl	80038b8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  //SCH_Init();
  //lcd_init();


  setTimer(5, 1);
 8000552:	2101      	movs	r1, #1
 8000554:	2005      	movs	r0, #5
 8000556:	f000 f971 	bl	800083c <setTimer>
  setTimer(10, 5);
 800055a:	2105      	movs	r1, #5
 800055c:	200a      	movs	r0, #10
 800055e:	f000 f96d 	bl	800083c <setTimer>

  while(1)
  {
	  fsm_automatic_run();
 8000562:	f7ff feaf 	bl	80002c4 <fsm_automatic_run>
	  if (timerFlag[5] == 1)
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <main+0x50>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d1f9      	bne.n	8000562 <main+0x2e>
	  {
		  setTimer(100, 5);
 800056e:	2105      	movs	r1, #5
 8000570:	2064      	movs	r0, #100	; 0x64
 8000572:	f000 f963 	bl	800083c <setTimer>
		  HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 8000576:	2120      	movs	r1, #32
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <main+0x54>)
 800057a:	f000 fee8 	bl	800134e <HAL_GPIO_TogglePin>
	  fsm_automatic_run();
 800057e:	e7f0      	b.n	8000562 <main+0x2e>
 8000580:	2000012c 	.word	0x2000012c
 8000584:	200000a8 	.word	0x200000a8
 8000588:	40010800 	.word	0x40010800

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b090      	sub	sp, #64	; 0x40
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	2228      	movs	r2, #40	; 0x28
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fd52 	bl	8004044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b2:	2301      	movs	r3, #1
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b6:	2310      	movs	r3, #16
 80005b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fd2e 	bl	8003024 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005ce:	f000 f92f 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 ff9a 	bl	8003524 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005f6:	f000 f91b 	bl	8000830 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3740      	adds	r7, #64	; 0x40
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x50>)
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <MX_I2C1_Init+0x54>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x50>)
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_I2C1_Init+0x58>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_I2C1_Init+0x50>)
 8000622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_I2C1_Init+0x50>)
 8000642:	f000 fe9d 	bl	8001380 <HAL_I2C_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 f8f0 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000d8 	.word	0x200000d8
 8000658:	40005400 	.word	0x40005400
 800065c:	000186a0 	.word	0x000186a0

08000660 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_TIM2_Init+0x94>)
 800067e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000682:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_TIM2_Init+0x94>)
 8000686:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800068a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_TIM2_Init+0x94>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_TIM2_Init+0x94>)
 8000694:	2209      	movs	r2, #9
 8000696:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_TIM2_Init+0x94>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_TIM2_Init+0x94>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006a4:	4813      	ldr	r0, [pc, #76]	; (80006f4 <MX_TIM2_Init+0x94>)
 80006a6:	f003 f8b7 	bl	8003818 <HAL_TIM_Base_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006b0:	f000 f8be 	bl	8000830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4619      	mov	r1, r3
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <MX_TIM2_Init+0x94>)
 80006c2:	f003 fa3b 	bl	8003b3c <HAL_TIM_ConfigClockSource>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006cc:	f000 f8b0 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_TIM2_Init+0x94>)
 80006de:	f003 fc1d 	bl	8003f1c <HAL_TIMEx_MasterConfigSynchronization>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006e8:	f000 f8a2 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000012c 	.word	0x2000012c

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070c:	4b3e      	ldr	r3, [pc, #248]	; (8000808 <MX_GPIO_Init+0x110>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a3d      	ldr	r2, [pc, #244]	; (8000808 <MX_GPIO_Init+0x110>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <MX_GPIO_Init+0x110>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b38      	ldr	r3, [pc, #224]	; (8000808 <MX_GPIO_Init+0x110>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a37      	ldr	r2, [pc, #220]	; (8000808 <MX_GPIO_Init+0x110>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b35      	ldr	r3, [pc, #212]	; (8000808 <MX_GPIO_Init+0x110>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073c:	4b32      	ldr	r3, [pc, #200]	; (8000808 <MX_GPIO_Init+0x110>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a31      	ldr	r2, [pc, #196]	; (8000808 <MX_GPIO_Init+0x110>)
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <MX_GPIO_Init+0x110>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0308 	and.w	r3, r3, #8
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_TEST_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 7148 	mov.w	r1, #800	; 0x320
 800075a:	482c      	ldr	r0, [pc, #176]	; (800080c <MX_GPIO_Init+0x114>)
 800075c:	f000 fddf 	bl	800131e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LSB2_Pin|MSB1_Pin|MSB2_Pin|LSB1_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000766:	482a      	ldr	r0, [pc, #168]	; (8000810 <MX_GPIO_Init+0x118>)
 8000768:	f000 fdd9 	bl	800131e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	4828      	ldr	r0, [pc, #160]	; (8000814 <MX_GPIO_Init+0x11c>)
 8000772:	f000 fdd4 	bl	800131e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin;
 8000776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000780:	2301      	movs	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON0_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	4822      	ldr	r0, [pc, #136]	; (8000814 <MX_GPIO_Init+0x11c>)
 800078c:	f000 fc2c 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 8000790:	2303      	movs	r3, #3
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000798:	2301      	movs	r3, #1
 800079a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	481a      	ldr	r0, [pc, #104]	; (800080c <MX_GPIO_Init+0x114>)
 80007a4:	f000 fc20 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TEST_Pin D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin|D7_Pin|D8_Pin;
 80007a8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	4619      	mov	r1, r3
 80007c0:	4812      	ldr	r0, [pc, #72]	; (800080c <MX_GPIO_Init+0x114>)
 80007c2:	f000 fc11 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LSB2_Pin MSB1_Pin MSB2_Pin LSB1_Pin */
  GPIO_InitStruct.Pin = LSB2_Pin|MSB1_Pin|MSB2_Pin|LSB1_Pin;
 80007c6:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2302      	movs	r3, #2
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4619      	mov	r1, r3
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <MX_GPIO_Init+0x118>)
 80007e0:	f000 fc02 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <MX_GPIO_Init+0x11c>)
 80007fc:	f000 fbf4 	bl	8000fe8 <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	40010800 	.word	0x40010800
 8000810:	40010c00 	.word	0x40010c00
 8000814:	40011000 	.word	0x40011000

08000818 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000820:	f000 f824 	bl	800086c <timerRun>
	getKeyInput();
 8000824:	f7ff fcbc 	bl	80001a0 <getKeyInput>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <setTimer>:

int timerCounter[MAX_TIMER] = {0};
int timerFlag[MAX_TIMER] = {0};

void setTimer(int duration, int index)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
	timerCounter[index] = duration;
 8000846:	4907      	ldr	r1, [pc, #28]	; (8000864 <setTimer+0x28>)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timerFlag[index] = 0;
 8000850:	4a05      	ldr	r2, [pc, #20]	; (8000868 <setTimer+0x2c>)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	2100      	movs	r1, #0
 8000856:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	20000080 	.word	0x20000080
 8000868:	200000a8 	.word	0x200000a8

0800086c <timerRun>:

void timerRun()
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_TIMER; i++)
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	e01c      	b.n	80008b2 <timerRun+0x46>
	{
		if (timerCounter[i] > 0)
 8000878:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <timerRun+0x58>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000880:	2b00      	cmp	r3, #0
 8000882:	dd13      	ble.n	80008ac <timerRun+0x40>
		{
			timerCounter[i]--;
 8000884:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <timerRun+0x58>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088c:	1e5a      	subs	r2, r3, #1
 800088e:	490d      	ldr	r1, [pc, #52]	; (80008c4 <timerRun+0x58>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timerCounter[i] <= 0)
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <timerRun+0x58>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	dc04      	bgt.n	80008ac <timerRun+0x40>
			{
				timerFlag[i] = 1;
 80008a2:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <timerRun+0x5c>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2101      	movs	r1, #1
 80008a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_TIMER; i++)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3301      	adds	r3, #1
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b09      	cmp	r3, #9
 80008b6:	dddf      	ble.n	8000878 <timerRun+0xc>
			}
		}
	}
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000080 	.word	0x20000080
 80008c8:	200000a8 	.word	0x200000a8

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_MspInit+0x5c>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <HAL_MspInit+0x5c>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6193      	str	r3, [r2, #24]
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_MspInit+0x5c>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x5c>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x5c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x5c>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <HAL_MspInit+0x60>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_MspInit+0x60>)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	40021000 	.word	0x40021000
 800092c:	40010000 	.word	0x40010000

08000930 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a25      	ldr	r2, [pc, #148]	; (80009e0 <HAL_I2C_MspInit+0xb0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d142      	bne.n	80009d6 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000950:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <HAL_I2C_MspInit+0xb4>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <HAL_I2C_MspInit+0xb4>)
 8000956:	f043 0308 	orr.w	r3, r3, #8
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <HAL_I2C_MspInit+0xb4>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f003 0308 	and.w	r3, r3, #8
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000968:	f44f 7340 	mov.w	r3, #768	; 0x300
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800096e:	2312      	movs	r3, #18
 8000970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	481a      	ldr	r0, [pc, #104]	; (80009e8 <HAL_I2C_MspInit+0xb8>)
 800097e:	f000 fb33 	bl	8000fe8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_I2C_MspInit+0xbc>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
 8000990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
 8000998:	4a14      	ldr	r2, [pc, #80]	; (80009ec <HAL_I2C_MspInit+0xbc>)
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_I2C_MspInit+0xb4>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <HAL_I2C_MspInit+0xb4>)
 80009a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <HAL_I2C_MspInit+0xb4>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	201f      	movs	r0, #31
 80009bc:	f000 fa57 	bl	8000e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009c0:	201f      	movs	r0, #31
 80009c2:	f000 fa70 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2020      	movs	r0, #32
 80009cc:	f000 fa4f 	bl	8000e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009d0:	2020      	movs	r0, #32
 80009d2:	f000 fa68 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40005400 	.word	0x40005400
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010c00 	.word	0x40010c00
 80009ec:	40010000 	.word	0x40010000

080009f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a00:	d113      	bne.n	8000a2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_TIM_Base_MspInit+0x44>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <HAL_TIM_Base_MspInit+0x44>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_TIM_Base_MspInit+0x44>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	201c      	movs	r0, #28
 8000a20:	f000 fa25 	bl	8000e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a24:	201c      	movs	r0, #28
 8000a26:	f000 fa3e 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <NMI_Handler+0x4>

08000a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7e:	f000 f903 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <TIM2_IRQHandler+0x10>)
 8000a8e:	f002 ff65 	bl	800395c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000012c 	.word	0x2000012c

08000a9c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <I2C1_EV_IRQHandler+0x10>)
 8000aa2:	f000 fdc5 	bl	8001630 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000d8 	.word	0x200000d8

08000ab0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <I2C1_ER_IRQHandler+0x10>)
 8000ab6:	f000 ff2c 	bl	8001912 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000d8 	.word	0x200000d8

08000ac4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <red_green>:
 */

#include "traffic_light.h"

void red_green()
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MSB1_GPIO_Port, MSB1_Pin, 1);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	480a      	ldr	r0, [pc, #40]	; (8000b04 <red_green+0x34>)
 8000ada:	f000 fc20 	bl	800131e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LSB1_GPIO_Port, LSB1_Pin, 1);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	4808      	ldr	r0, [pc, #32]	; (8000b04 <red_green+0x34>)
 8000ae4:	f000 fc1b 	bl	800131e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MSB2_GPIO_Port, MSB2_Pin, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2110      	movs	r1, #16
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <red_green+0x34>)
 8000aee:	f000 fc16 	bl	800131e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LSB2_GPIO_Port, LSB2_Pin, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <red_green+0x34>)
 8000afa:	f000 fc10 	bl	800131e <HAL_GPIO_WritePin>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40010c00 	.word	0x40010c00

08000b08 <red_yellow>:

void red_yellow()
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MSB1_GPIO_Port, MSB1_Pin, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2108      	movs	r1, #8
 8000b10:	480a      	ldr	r0, [pc, #40]	; (8000b3c <red_yellow+0x34>)
 8000b12:	f000 fc04 	bl	800131e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LSB1_GPIO_Port, LSB1_Pin, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2120      	movs	r1, #32
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <red_yellow+0x34>)
 8000b1c:	f000 fbff 	bl	800131e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MSB2_GPIO_Port, MSB2_Pin, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2110      	movs	r1, #16
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <red_yellow+0x34>)
 8000b26:	f000 fbfa 	bl	800131e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LSB2_GPIO_Port, LSB2_Pin, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <red_yellow+0x34>)
 8000b32:	f000 fbf4 	bl	800131e <HAL_GPIO_WritePin>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40010c00 	.word	0x40010c00

08000b40 <green_red>:

void green_red()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MSB1_GPIO_Port, MSB1_Pin, 1);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2108      	movs	r1, #8
 8000b48:	480a      	ldr	r0, [pc, #40]	; (8000b74 <green_red+0x34>)
 8000b4a:	f000 fbe8 	bl	800131e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LSB1_GPIO_Port, LSB1_Pin, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2120      	movs	r1, #32
 8000b52:	4808      	ldr	r0, [pc, #32]	; (8000b74 <green_red+0x34>)
 8000b54:	f000 fbe3 	bl	800131e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MSB2_GPIO_Port, MSB2_Pin, 1);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <green_red+0x34>)
 8000b5e:	f000 fbde 	bl	800131e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LSB2_GPIO_Port, LSB2_Pin, 1);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <green_red+0x34>)
 8000b6a:	f000 fbd8 	bl	800131e <HAL_GPIO_WritePin>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010c00 	.word	0x40010c00

08000b78 <yellow_red>:

void yellow_red()
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MSB1_GPIO_Port, MSB1_Pin, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2108      	movs	r1, #8
 8000b80:	480a      	ldr	r0, [pc, #40]	; (8000bac <yellow_red+0x34>)
 8000b82:	f000 fbcc 	bl	800131e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LSB1_GPIO_Port, LSB1_Pin, 1);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2120      	movs	r1, #32
 8000b8a:	4808      	ldr	r0, [pc, #32]	; (8000bac <yellow_red+0x34>)
 8000b8c:	f000 fbc7 	bl	800131e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MSB2_GPIO_Port, MSB2_Pin, 1);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2110      	movs	r1, #16
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <yellow_red+0x34>)
 8000b96:	f000 fbc2 	bl	800131e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LSB2_GPIO_Port, LSB2_Pin, 1);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <yellow_red+0x34>)
 8000ba2:	f000 fbbc 	bl	800131e <HAL_GPIO_WritePin>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40010c00 	.word	0x40010c00

08000bb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb0:	f7ff ff88 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bb6:	490c      	ldr	r1, [pc, #48]	; (8000be8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	; (8000bec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bcc:	4c09      	ldr	r4, [pc, #36]	; (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f003 fa0f 	bl	8003ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bde:	f7ff fca9 	bl	8000534 <main>
  bx lr
 8000be2:	4770      	bx	lr
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000bec:	080040a0 	.word	0x080040a0
  ldr r2, =_sbss
 8000bf0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000bf4:	20000178 	.word	0x20000178

08000bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_2_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x28>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x28>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f923 	bl	8000e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	200f      	movs	r0, #15
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fe58 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f93b 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f000 f903 	bl	8000e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000018 	.word	0x20000018
 8000c80:	20000020 	.word	0x20000020
 8000c84:	2000001c 	.word	0x2000001c

08000c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x1c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a03      	ldr	r2, [pc, #12]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	20000020 	.word	0x20000020
 8000ca8:	20000174 	.word	0x20000174

08000cac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b02      	ldr	r3, [pc, #8]	; (8000cbc <HAL_GetTick+0x10>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	20000174 	.word	0x20000174

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4906      	ldr	r1, [pc, #24]	; (8000d58 <__NVIC_EnableIRQ+0x34>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e24:	d301      	bcc.n	8000e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00f      	b.n	8000e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <SysTick_Config+0x40>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e32:	210f      	movs	r1, #15
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f7ff ff90 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SysTick_Config+0x40>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Config+0x40>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff2d 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff42 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff90 	bl	8000db0 <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5f 	bl	8000d5c <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff35 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffa2 	bl	8000e14 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d005      	beq.n	8000f00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e051      	b.n	8000fa4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 020e 	bic.w	r2, r2, #14
 8000f0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0201 	bic.w	r2, r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <HAL_DMA_Abort_IT+0xd4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d029      	beq.n	8000f7e <HAL_DMA_Abort_IT+0xa2>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_DMA_Abort_IT+0xd8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d022      	beq.n	8000f7a <HAL_DMA_Abort_IT+0x9e>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <HAL_DMA_Abort_IT+0xdc>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d01a      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x98>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a1e      	ldr	r2, [pc, #120]	; (8000fbc <HAL_DMA_Abort_IT+0xe0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d012      	beq.n	8000f6e <HAL_DMA_Abort_IT+0x92>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <HAL_DMA_Abort_IT+0xe4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d00a      	beq.n	8000f68 <HAL_DMA_Abort_IT+0x8c>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <HAL_DMA_Abort_IT+0xe8>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d102      	bne.n	8000f62 <HAL_DMA_Abort_IT+0x86>
 8000f5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f60:	e00e      	b.n	8000f80 <HAL_DMA_Abort_IT+0xa4>
 8000f62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f66:	e00b      	b.n	8000f80 <HAL_DMA_Abort_IT+0xa4>
 8000f68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f6c:	e008      	b.n	8000f80 <HAL_DMA_Abort_IT+0xa4>
 8000f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f72:	e005      	b.n	8000f80 <HAL_DMA_Abort_IT+0xa4>
 8000f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f78:	e002      	b.n	8000f80 <HAL_DMA_Abort_IT+0xa4>
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	e000      	b.n	8000f80 <HAL_DMA_Abort_IT+0xa4>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	4a11      	ldr	r2, [pc, #68]	; (8000fc8 <HAL_DMA_Abort_IT+0xec>)
 8000f82:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	4798      	blx	r3
    } 
  }
  return status;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020008 	.word	0x40020008
 8000fb4:	4002001c 	.word	0x4002001c
 8000fb8:	40020030 	.word	0x40020030
 8000fbc:	40020044 	.word	0x40020044
 8000fc0:	40020058 	.word	0x40020058
 8000fc4:	4002006c 	.word	0x4002006c
 8000fc8:	40020000 	.word	0x40020000

08000fcc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fda:	b2db      	uxtb	r3, r3
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b08b      	sub	sp, #44	; 0x2c
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffa:	e169      	b.n	80012d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	429a      	cmp	r2, r3
 8001016:	f040 8158 	bne.w	80012ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4a9a      	ldr	r2, [pc, #616]	; (8001288 <HAL_GPIO_Init+0x2a0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d05e      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 8001024:	4a98      	ldr	r2, [pc, #608]	; (8001288 <HAL_GPIO_Init+0x2a0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d875      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 800102a:	4a98      	ldr	r2, [pc, #608]	; (800128c <HAL_GPIO_Init+0x2a4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d058      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 8001030:	4a96      	ldr	r2, [pc, #600]	; (800128c <HAL_GPIO_Init+0x2a4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d86f      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 8001036:	4a96      	ldr	r2, [pc, #600]	; (8001290 <HAL_GPIO_Init+0x2a8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d052      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 800103c:	4a94      	ldr	r2, [pc, #592]	; (8001290 <HAL_GPIO_Init+0x2a8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d869      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 8001042:	4a94      	ldr	r2, [pc, #592]	; (8001294 <HAL_GPIO_Init+0x2ac>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d04c      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 8001048:	4a92      	ldr	r2, [pc, #584]	; (8001294 <HAL_GPIO_Init+0x2ac>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d863      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 800104e:	4a92      	ldr	r2, [pc, #584]	; (8001298 <HAL_GPIO_Init+0x2b0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d046      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 8001054:	4a90      	ldr	r2, [pc, #576]	; (8001298 <HAL_GPIO_Init+0x2b0>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d85d      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 800105a:	2b12      	cmp	r3, #18
 800105c:	d82a      	bhi.n	80010b4 <HAL_GPIO_Init+0xcc>
 800105e:	2b12      	cmp	r3, #18
 8001060:	d859      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 8001062:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <HAL_GPIO_Init+0x80>)
 8001064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001068:	080010e3 	.word	0x080010e3
 800106c:	080010bd 	.word	0x080010bd
 8001070:	080010cf 	.word	0x080010cf
 8001074:	08001111 	.word	0x08001111
 8001078:	08001117 	.word	0x08001117
 800107c:	08001117 	.word	0x08001117
 8001080:	08001117 	.word	0x08001117
 8001084:	08001117 	.word	0x08001117
 8001088:	08001117 	.word	0x08001117
 800108c:	08001117 	.word	0x08001117
 8001090:	08001117 	.word	0x08001117
 8001094:	08001117 	.word	0x08001117
 8001098:	08001117 	.word	0x08001117
 800109c:	08001117 	.word	0x08001117
 80010a0:	08001117 	.word	0x08001117
 80010a4:	08001117 	.word	0x08001117
 80010a8:	08001117 	.word	0x08001117
 80010ac:	080010c5 	.word	0x080010c5
 80010b0:	080010d9 	.word	0x080010d9
 80010b4:	4a79      	ldr	r2, [pc, #484]	; (800129c <HAL_GPIO_Init+0x2b4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ba:	e02c      	b.n	8001116 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	623b      	str	r3, [r7, #32]
          break;
 80010c2:	e029      	b.n	8001118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	3304      	adds	r3, #4
 80010ca:	623b      	str	r3, [r7, #32]
          break;
 80010cc:	e024      	b.n	8001118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	3308      	adds	r3, #8
 80010d4:	623b      	str	r3, [r7, #32]
          break;
 80010d6:	e01f      	b.n	8001118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	330c      	adds	r3, #12
 80010de:	623b      	str	r3, [r7, #32]
          break;
 80010e0:	e01a      	b.n	8001118 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ea:	2304      	movs	r3, #4
 80010ec:	623b      	str	r3, [r7, #32]
          break;
 80010ee:	e013      	b.n	8001118 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d105      	bne.n	8001104 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f8:	2308      	movs	r3, #8
 80010fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	611a      	str	r2, [r3, #16]
          break;
 8001102:	e009      	b.n	8001118 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001104:	2308      	movs	r3, #8
 8001106:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69fa      	ldr	r2, [r7, #28]
 800110c:	615a      	str	r2, [r3, #20]
          break;
 800110e:	e003      	b.n	8001118 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
          break;
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x130>
          break;
 8001116:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2bff      	cmp	r3, #255	; 0xff
 800111c:	d801      	bhi.n	8001122 <HAL_GPIO_Init+0x13a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	e001      	b.n	8001126 <HAL_GPIO_Init+0x13e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3304      	adds	r3, #4
 8001126:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2bff      	cmp	r3, #255	; 0xff
 800112c:	d802      	bhi.n	8001134 <HAL_GPIO_Init+0x14c>
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	e002      	b.n	800113a <HAL_GPIO_Init+0x152>
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	3b08      	subs	r3, #8
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	210f      	movs	r1, #15
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	401a      	ands	r2, r3
 800114c:	6a39      	ldr	r1, [r7, #32]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	431a      	orrs	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 80b1 	beq.w	80012ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001168:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <HAL_GPIO_Init+0x2b8>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a4c      	ldr	r2, [pc, #304]	; (80012a0 <HAL_GPIO_Init+0x2b8>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <HAL_GPIO_Init+0x2b8>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001180:	4a48      	ldr	r2, [pc, #288]	; (80012a4 <HAL_GPIO_Init+0x2bc>)
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a40      	ldr	r2, [pc, #256]	; (80012a8 <HAL_GPIO_Init+0x2c0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d013      	beq.n	80011d4 <HAL_GPIO_Init+0x1ec>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a3f      	ldr	r2, [pc, #252]	; (80012ac <HAL_GPIO_Init+0x2c4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d00d      	beq.n	80011d0 <HAL_GPIO_Init+0x1e8>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a3e      	ldr	r2, [pc, #248]	; (80012b0 <HAL_GPIO_Init+0x2c8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d007      	beq.n	80011cc <HAL_GPIO_Init+0x1e4>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a3d      	ldr	r2, [pc, #244]	; (80012b4 <HAL_GPIO_Init+0x2cc>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d101      	bne.n	80011c8 <HAL_GPIO_Init+0x1e0>
 80011c4:	2303      	movs	r3, #3
 80011c6:	e006      	b.n	80011d6 <HAL_GPIO_Init+0x1ee>
 80011c8:	2304      	movs	r3, #4
 80011ca:	e004      	b.n	80011d6 <HAL_GPIO_Init+0x1ee>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e002      	b.n	80011d6 <HAL_GPIO_Init+0x1ee>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <HAL_GPIO_Init+0x1ee>
 80011d4:	2300      	movs	r3, #0
 80011d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d8:	f002 0203 	and.w	r2, r2, #3
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4093      	lsls	r3, r2
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011e6:	492f      	ldr	r1, [pc, #188]	; (80012a4 <HAL_GPIO_Init+0x2bc>)
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	492c      	ldr	r1, [pc, #176]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	608b      	str	r3, [r1, #8]
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	43db      	mvns	r3, r3
 8001216:	4928      	ldr	r1, [pc, #160]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001218:	4013      	ands	r3, r2
 800121a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d006      	beq.n	8001236 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	4922      	ldr	r1, [pc, #136]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	60cb      	str	r3, [r1, #12]
 8001234:	e006      	b.n	8001244 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	43db      	mvns	r3, r3
 800123e:	491e      	ldr	r1, [pc, #120]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001240:	4013      	ands	r3, r2
 8001242:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	4918      	ldr	r1, [pc, #96]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	43db      	mvns	r3, r3
 8001266:	4914      	ldr	r1, [pc, #80]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001268:	4013      	ands	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d021      	beq.n	80012bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	490e      	ldr	r1, [pc, #56]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]
 8001284:	e021      	b.n	80012ca <HAL_GPIO_Init+0x2e2>
 8001286:	bf00      	nop
 8001288:	10320000 	.word	0x10320000
 800128c:	10310000 	.word	0x10310000
 8001290:	10220000 	.word	0x10220000
 8001294:	10210000 	.word	0x10210000
 8001298:	10120000 	.word	0x10120000
 800129c:	10110000 	.word	0x10110000
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010000 	.word	0x40010000
 80012a8:	40010800 	.word	0x40010800
 80012ac:	40010c00 	.word	0x40010c00
 80012b0:	40011000 	.word	0x40011000
 80012b4:	40011400 	.word	0x40011400
 80012b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_GPIO_Init+0x304>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4909      	ldr	r1, [pc, #36]	; (80012ec <HAL_GPIO_Init+0x304>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	3301      	adds	r3, #1
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	fa22 f303 	lsr.w	r3, r2, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f47f ae8e 	bne.w	8000ffc <HAL_GPIO_Init+0x14>
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	372c      	adds	r7, #44	; 0x2c
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	40010400 	.word	0x40010400

080012f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	4013      	ands	r3, r2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001308:	2301      	movs	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e001      	b.n	8001312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001312:	7bfb      	ldrb	r3, [r7, #15]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	807b      	strh	r3, [r7, #2]
 800132a:	4613      	mov	r3, r2
 800132c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800132e:	787b      	ldrb	r3, [r7, #1]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001334:	887a      	ldrh	r2, [r7, #2]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800133a:	e003      	b.n	8001344 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800133c:	887b      	ldrh	r3, [r7, #2]
 800133e:	041a      	lsls	r2, r3, #16
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	611a      	str	r2, [r3, #16]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800134e:	b480      	push	{r7}
 8001350:	b085      	sub	sp, #20
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001360:	887a      	ldrh	r2, [r7, #2]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4013      	ands	r3, r2
 8001366:	041a      	lsls	r2, r3, #16
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43d9      	mvns	r1, r3
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	400b      	ands	r3, r1
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e12b      	b.n	80015ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fac2 	bl	8000930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2224      	movs	r2, #36	; 0x24
 80013b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013e4:	f002 f9e6 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 80013e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4a81      	ldr	r2, [pc, #516]	; (80015f4 <HAL_I2C_Init+0x274>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d807      	bhi.n	8001404 <HAL_I2C_Init+0x84>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4a80      	ldr	r2, [pc, #512]	; (80015f8 <HAL_I2C_Init+0x278>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	bf94      	ite	ls
 80013fc:	2301      	movls	r3, #1
 80013fe:	2300      	movhi	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	e006      	b.n	8001412 <HAL_I2C_Init+0x92>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4a7d      	ldr	r2, [pc, #500]	; (80015fc <HAL_I2C_Init+0x27c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	bf94      	ite	ls
 800140c:	2301      	movls	r3, #1
 800140e:	2300      	movhi	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e0e7      	b.n	80015ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4a78      	ldr	r2, [pc, #480]	; (8001600 <HAL_I2C_Init+0x280>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	0c9b      	lsrs	r3, r3, #18
 8001424:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	430a      	orrs	r2, r1
 8001438:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4a6a      	ldr	r2, [pc, #424]	; (80015f4 <HAL_I2C_Init+0x274>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d802      	bhi.n	8001454 <HAL_I2C_Init+0xd4>
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	3301      	adds	r3, #1
 8001452:	e009      	b.n	8001468 <HAL_I2C_Init+0xe8>
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	4a69      	ldr	r2, [pc, #420]	; (8001604 <HAL_I2C_Init+0x284>)
 8001460:	fba2 2303 	umull	r2, r3, r2, r3
 8001464:	099b      	lsrs	r3, r3, #6
 8001466:	3301      	adds	r3, #1
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	430b      	orrs	r3, r1
 800146e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800147a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	495c      	ldr	r1, [pc, #368]	; (80015f4 <HAL_I2C_Init+0x274>)
 8001484:	428b      	cmp	r3, r1
 8001486:	d819      	bhi.n	80014bc <HAL_I2C_Init+0x13c>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e59      	subs	r1, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fbb1 f3f3 	udiv	r3, r1, r3
 8001496:	1c59      	adds	r1, r3, #1
 8001498:	f640 73fc 	movw	r3, #4092	; 0xffc
 800149c:	400b      	ands	r3, r1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00a      	beq.n	80014b8 <HAL_I2C_Init+0x138>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1e59      	subs	r1, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80014b0:	3301      	adds	r3, #1
 80014b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b6:	e051      	b.n	800155c <HAL_I2C_Init+0x1dc>
 80014b8:	2304      	movs	r3, #4
 80014ba:	e04f      	b.n	800155c <HAL_I2C_Init+0x1dc>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d111      	bne.n	80014e8 <HAL_I2C_Init+0x168>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1e58      	subs	r0, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6859      	ldr	r1, [r3, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	440b      	add	r3, r1
 80014d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	e012      	b.n	800150e <HAL_I2C_Init+0x18e>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1e58      	subs	r0, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	0099      	lsls	r1, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_I2C_Init+0x196>
 8001512:	2301      	movs	r3, #1
 8001514:	e022      	b.n	800155c <HAL_I2C_Init+0x1dc>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10e      	bne.n	800153c <HAL_I2C_Init+0x1bc>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1e58      	subs	r0, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6859      	ldr	r1, [r3, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	440b      	add	r3, r1
 800152c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001530:	3301      	adds	r3, #1
 8001532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153a:	e00f      	b.n	800155c <HAL_I2C_Init+0x1dc>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	1e58      	subs	r0, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	0099      	lsls	r1, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001552:	3301      	adds	r3, #1
 8001554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	6809      	ldr	r1, [r1, #0]
 8001560:	4313      	orrs	r3, r2
 8001562:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69da      	ldr	r2, [r3, #28]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800158a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6911      	ldr	r1, [r2, #16]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68d2      	ldr	r2, [r2, #12]
 8001596:	4311      	orrs	r1, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	430b      	orrs	r3, r1
 800159e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	000186a0 	.word	0x000186a0
 80015f8:	001e847f 	.word	0x001e847f
 80015fc:	003d08ff 	.word	0x003d08ff
 8001600:	431bde83 	.word	0x431bde83
 8001604:	10624dd3 	.word	0x10624dd3

08001608 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	2b80      	cmp	r3, #128	; 0x80
 800161c:	d103      	bne.n	8001626 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  }
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001650:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001658:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b10      	cmp	r3, #16
 800165e:	d003      	beq.n	8001668 <HAL_I2C_EV_IRQHandler+0x38>
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	2b40      	cmp	r3, #64	; 0x40
 8001664:	f040 80c1 	bne.w	80017ea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10d      	bne.n	800169e <HAL_I2C_EV_IRQHandler+0x6e>
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001688:	d003      	beq.n	8001692 <HAL_I2C_EV_IRQHandler+0x62>
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001690:	d101      	bne.n	8001696 <HAL_I2C_EV_IRQHandler+0x66>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <HAL_I2C_EV_IRQHandler+0x68>
 8001696:	2300      	movs	r3, #0
 8001698:	2b01      	cmp	r3, #1
 800169a:	f000 8132 	beq.w	8001902 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00c      	beq.n	80016c2 <HAL_I2C_EV_IRQHandler+0x92>
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	0a5b      	lsrs	r3, r3, #9
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d006      	beq.n	80016c2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f001 fc9b 	bl	8002ff0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fd99 	bl	80021f2 <I2C_Master_SB>
 80016c0:	e092      	b.n	80017e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <HAL_I2C_EV_IRQHandler+0xb2>
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	0a5b      	lsrs	r3, r3, #9
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 fe0e 	bl	80022fc <I2C_Master_ADD10>
 80016e0:	e082      	b.n	80017e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	085b      	lsrs	r3, r3, #1
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <HAL_I2C_EV_IRQHandler+0xd2>
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	0a5b      	lsrs	r3, r3, #9
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fe27 	bl	800234e <I2C_Master_ADDR>
 8001700:	e072      	b.n	80017e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d03b      	beq.n	8001786 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800171c:	f000 80f3 	beq.w	8001906 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	09db      	lsrs	r3, r3, #7
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00f      	beq.n	800174c <HAL_I2C_EV_IRQHandler+0x11c>
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	0a9b      	lsrs	r3, r3, #10
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d009      	beq.n	800174c <HAL_I2C_EV_IRQHandler+0x11c>
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d103      	bne.n	800174c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f9f1 	bl	8001b2c <I2C_MasterTransmit_TXE>
 800174a:	e04d      	b.n	80017e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80d6 	beq.w	8001906 <HAL_I2C_EV_IRQHandler+0x2d6>
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	0a5b      	lsrs	r3, r3, #9
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80cf 	beq.w	8001906 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001768:	7bbb      	ldrb	r3, [r7, #14]
 800176a:	2b21      	cmp	r3, #33	; 0x21
 800176c:	d103      	bne.n	8001776 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fa78 	bl	8001c64 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001774:	e0c7      	b.n	8001906 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	2b40      	cmp	r3, #64	; 0x40
 800177a:	f040 80c4 	bne.w	8001906 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fae6 	bl	8001d50 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001784:	e0bf      	b.n	8001906 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001794:	f000 80b7 	beq.w	8001906 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	099b      	lsrs	r3, r3, #6
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00f      	beq.n	80017c4 <HAL_I2C_EV_IRQHandler+0x194>
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	0a9b      	lsrs	r3, r3, #10
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_I2C_EV_IRQHandler+0x194>
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d103      	bne.n	80017c4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 fb5f 	bl	8001e80 <I2C_MasterReceive_RXNE>
 80017c2:	e011      	b.n	80017e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 809a 	beq.w	8001906 <HAL_I2C_EV_IRQHandler+0x2d6>
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	0a5b      	lsrs	r3, r3, #9
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8093 	beq.w	8001906 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 fc15 	bl	8002010 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017e6:	e08e      	b.n	8001906 <HAL_I2C_EV_IRQHandler+0x2d6>
 80017e8:	e08d      	b.n	8001906 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e007      	b.n	800180c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	085b      	lsrs	r3, r3, #1
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d012      	beq.n	800183e <HAL_I2C_EV_IRQHandler+0x20e>
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	0a5b      	lsrs	r3, r3, #9
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00c      	beq.n	800183e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001834:	69b9      	ldr	r1, [r7, #24]
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 ffe0 	bl	80027fc <I2C_Slave_ADDR>
 800183c:	e066      	b.n	800190c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d009      	beq.n	800185e <HAL_I2C_EV_IRQHandler+0x22e>
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	0a5b      	lsrs	r3, r3, #9
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f001 f81a 	bl	8002890 <I2C_Slave_STOPF>
 800185c:	e056      	b.n	800190c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800185e:	7bbb      	ldrb	r3, [r7, #14]
 8001860:	2b21      	cmp	r3, #33	; 0x21
 8001862:	d002      	beq.n	800186a <HAL_I2C_EV_IRQHandler+0x23a>
 8001864:	7bbb      	ldrb	r3, [r7, #14]
 8001866:	2b29      	cmp	r3, #41	; 0x29
 8001868:	d125      	bne.n	80018b6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	09db      	lsrs	r3, r3, #7
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00f      	beq.n	8001896 <HAL_I2C_EV_IRQHandler+0x266>
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	0a9b      	lsrs	r3, r3, #10
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_I2C_EV_IRQHandler+0x266>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 fef8 	bl	8002684 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001894:	e039      	b.n	800190a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d033      	beq.n	800190a <HAL_I2C_EV_IRQHandler+0x2da>
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	0a5b      	lsrs	r3, r3, #9
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d02d      	beq.n	800190a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 ff25 	bl	80026fe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018b4:	e029      	b.n	800190a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00f      	beq.n	80018e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	0a9b      	lsrs	r3, r3, #10
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 ff2f 	bl	800273e <I2C_SlaveReceive_RXNE>
 80018e0:	e014      	b.n	800190c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00e      	beq.n	800190c <HAL_I2C_EV_IRQHandler+0x2dc>
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	0a5b      	lsrs	r3, r3, #9
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 ff5d 	bl	80027ba <I2C_SlaveReceive_BTF>
 8001900:	e004      	b.n	800190c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001902:	bf00      	nop
 8001904:	e002      	b.n	800190c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001906:	bf00      	nop
 8001908:	e000      	b.n	800190c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800190a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b08a      	sub	sp, #40	; 0x28
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001934:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d016      	beq.n	8001970 <HAL_I2C_ER_IRQHandler+0x5e>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d010      	beq.n	8001970 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800195e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800196e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	0a5b      	lsrs	r3, r3, #9
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00e      	beq.n	800199a <HAL_I2C_ER_IRQHandler+0x88>
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	f043 0302 	orr.w	r3, r3, #2
 800198e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001998:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	0a9b      	lsrs	r3, r3, #10
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d03f      	beq.n	8001a26 <HAL_I2C_ER_IRQHandler+0x114>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d039      	beq.n	8001a26 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80019b2:	7efb      	ldrb	r3, [r7, #27]
 80019b4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80019cc:	7ebb      	ldrb	r3, [r7, #26]
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	d112      	bne.n	80019f8 <HAL_I2C_ER_IRQHandler+0xe6>
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10f      	bne.n	80019f8 <HAL_I2C_ER_IRQHandler+0xe6>
 80019d8:	7cfb      	ldrb	r3, [r7, #19]
 80019da:	2b21      	cmp	r3, #33	; 0x21
 80019dc:	d008      	beq.n	80019f0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80019de:	7cfb      	ldrb	r3, [r7, #19]
 80019e0:	2b29      	cmp	r3, #41	; 0x29
 80019e2:	d005      	beq.n	80019f0 <HAL_I2C_ER_IRQHandler+0xde>
 80019e4:	7cfb      	ldrb	r3, [r7, #19]
 80019e6:	2b28      	cmp	r3, #40	; 0x28
 80019e8:	d106      	bne.n	80019f8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b21      	cmp	r3, #33	; 0x21
 80019ee:	d103      	bne.n	80019f8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f001 f87d 	bl	8002af0 <I2C_Slave_AF>
 80019f6:	e016      	b.n	8001a26 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a00:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a0a:	7efb      	ldrb	r3, [r7, #27]
 8001a0c:	2b10      	cmp	r3, #16
 8001a0e:	d002      	beq.n	8001a16 <HAL_I2C_ER_IRQHandler+0x104>
 8001a10:	7efb      	ldrb	r3, [r7, #27]
 8001a12:	2b40      	cmp	r3, #64	; 0x40
 8001a14:	d107      	bne.n	8001a26 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a24:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	0adb      	lsrs	r3, r3, #11
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00e      	beq.n	8001a50 <HAL_I2C_ER_IRQHandler+0x13e>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001a4e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d008      	beq.n	8001a68 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f001 f8b8 	bl	8002bd8 <I2C_ITError>
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3728      	adds	r7, #40	; 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	70fb      	strb	r3, [r7, #3]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d150      	bne.n	8001bf4 <I2C_MasterTransmit_TXE+0xc8>
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2b21      	cmp	r3, #33	; 0x21
 8001b56:	d14d      	bne.n	8001bf4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d01d      	beq.n	8001b9a <I2C_MasterTransmit_TXE+0x6e>
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d01a      	beq.n	8001b9a <I2C_MasterTransmit_TXE+0x6e>
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b6a:	d016      	beq.n	8001b9a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b7a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2211      	movs	r2, #17
 8001b80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff6c 	bl	8001a70 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b98:	e060      	b.n	8001c5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ba8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b40      	cmp	r3, #64	; 0x40
 8001bd2:	d107      	bne.n	8001be4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff81 	bl	8001ae4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001be2:	e03b      	b.n	8001c5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff3f 	bl	8001a70 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bf2:	e033      	b.n	8001c5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b21      	cmp	r3, #33	; 0x21
 8001bf8:	d005      	beq.n	8001c06 <I2C_MasterTransmit_TXE+0xda>
 8001bfa:	7bbb      	ldrb	r3, [r7, #14]
 8001bfc:	2b40      	cmp	r3, #64	; 0x40
 8001bfe:	d12d      	bne.n	8001c5c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	2b22      	cmp	r3, #34	; 0x22
 8001c04:	d12a      	bne.n	8001c5c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d108      	bne.n	8001c22 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001c20:	e01c      	b.n	8001c5c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b40      	cmp	r3, #64	; 0x40
 8001c2c:	d103      	bne.n	8001c36 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f88e 	bl	8001d50 <I2C_MemoryTransmit_TXE_BTF>
}
 8001c34:	e012      	b.n	8001c5c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001c5a:	e7ff      	b.n	8001c5c <I2C_MasterTransmit_TXE+0x130>
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b21      	cmp	r3, #33	; 0x21
 8001c7c:	d164      	bne.n	8001d48 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d012      	beq.n	8001cae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001cac:	e04c      	b.n	8001d48 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d01d      	beq.n	8001cf0 <I2C_MasterTransmit_BTF+0x8c>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d01a      	beq.n	8001cf0 <I2C_MasterTransmit_BTF+0x8c>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cc0:	d016      	beq.n	8001cf0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cd0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2211      	movs	r2, #17
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fec1 	bl	8001a70 <HAL_I2C_MasterTxCpltCallback>
}
 8001cee:	e02b      	b.n	8001d48 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cfe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b40      	cmp	r3, #64	; 0x40
 8001d28:	d107      	bne.n	8001d3a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fed6 	bl	8001ae4 <HAL_I2C_MemTxCpltCallback>
}
 8001d38:	e006      	b.n	8001d48 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff fe94 	bl	8001a70 <HAL_I2C_MasterTxCpltCallback>
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d11d      	bne.n	8001da4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d10b      	bne.n	8001d88 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d80:	1c9a      	adds	r2, r3, #2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001d86:	e077      	b.n	8001e78 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	121b      	asrs	r3, r3, #8
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001da2:	e069      	b.n	8001e78 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d10b      	bne.n	8001dc4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001dc2:	e059      	b.n	8001e78 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d152      	bne.n	8001e72 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b22      	cmp	r3, #34	; 0x22
 8001dd0:	d10d      	bne.n	8001dee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001dec:	e044      	b.n	8001e78 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d015      	beq.n	8001e24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	2b21      	cmp	r3, #33	; 0x21
 8001dfc:	d112      	bne.n	8001e24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	781a      	ldrb	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e22:	e029      	b.n	8001e78 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d124      	bne.n	8001e78 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b21      	cmp	r3, #33	; 0x21
 8001e32:	d121      	bne.n	8001e78 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e42:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fe3a 	bl	8001ae4 <HAL_I2C_MemTxCpltCallback>
}
 8001e70:	e002      	b.n	8001e78 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff fbc8 	bl	8001608 <I2C_Flush_DR>
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b22      	cmp	r3, #34	; 0x22
 8001e92:	f040 80b9 	bne.w	8002008 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d921      	bls.n	8001eee <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	f040 8096 	bne.w	8002008 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eea:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001eec:	e08c      	b.n	8002008 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d07f      	beq.n	8001ff6 <I2C_MasterReceive_RXNE+0x176>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d002      	beq.n	8001f02 <I2C_MasterReceive_RXNE+0x82>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d179      	bne.n	8001ff6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f001 f842 	bl	8002f8c <I2C_WaitOnSTOPRequestThroughIT>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d14c      	bne.n	8001fa8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f1c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f2c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d10a      	bne.n	8001f7e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fdbd 	bl	8001af6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f7c:	e044      	b.n	8002008 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d002      	beq.n	8001f92 <I2C_MasterReceive_RXNE+0x112>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	d103      	bne.n	8001f9a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
 8001f98:	e002      	b.n	8001fa0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2212      	movs	r2, #18
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fd6e 	bl	8001a82 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001fa6:	e02f      	b.n	8002008 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fb6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fd8a 	bl	8001b08 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001ff4:	e008      	b.n	8002008 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002004:	605a      	str	r2, [r3, #4]
}
 8002006:	e7ff      	b.n	8002008 <I2C_MasterReceive_RXNE+0x188>
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b04      	cmp	r3, #4
 8002026:	d11b      	bne.n	8002060 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002036:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800205e:	e0c4      	b.n	80021ea <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b03      	cmp	r3, #3
 8002068:	d129      	bne.n	80020be <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002078:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d00a      	beq.n	8002096 <I2C_MasterReceive_BTF+0x86>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d007      	beq.n	8002096 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002094:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80020bc:	e095      	b.n	80021ea <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d17d      	bne.n	80021c4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d002      	beq.n	80020d4 <I2C_MasterReceive_BTF+0xc4>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b10      	cmp	r3, #16
 80020d2:	d108      	bne.n	80020e6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e016      	b.n	8002114 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d002      	beq.n	80020f2 <I2C_MasterReceive_BTF+0xe2>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d108      	bne.n	8002104 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e007      	b.n	8002114 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002112:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002130:	b29b      	uxth	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800216e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b40      	cmp	r3, #64	; 0x40
 8002182:	d10a      	bne.n	800219a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fcaf 	bl	8001af6 <HAL_I2C_MemRxCpltCallback>
}
 8002198:	e027      	b.n	80021ea <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d002      	beq.n	80021ae <I2C_MasterReceive_BTF+0x19e>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	d103      	bne.n	80021b6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
 80021b4:	e002      	b.n	80021bc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2212      	movs	r2, #18
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fc60 	bl	8001a82 <HAL_I2C_MasterRxCpltCallback>
}
 80021c2:	e012      	b.n	80021ea <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d117      	bne.n	8002236 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	b2db      	uxtb	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800221e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002220:	e067      	b.n	80022f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	611a      	str	r2, [r3, #16]
}
 8002234:	e05d      	b.n	80022f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800223e:	d133      	bne.n	80022a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b21      	cmp	r3, #33	; 0x21
 800224a:	d109      	bne.n	8002260 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800225c:	611a      	str	r2, [r3, #16]
 800225e:	e008      	b.n	8002272 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	b2da      	uxtb	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002276:	2b00      	cmp	r3, #0
 8002278:	d004      	beq.n	8002284 <I2C_Master_SB+0x92>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	2b00      	cmp	r3, #0
 8002282:	d108      	bne.n	8002296 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	2b00      	cmp	r3, #0
 800228a:	d032      	beq.n	80022f2 <I2C_Master_SB+0x100>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	2b00      	cmp	r3, #0
 8002294:	d02d      	beq.n	80022f2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a4:	605a      	str	r2, [r3, #4]
}
 80022a6:	e024      	b.n	80022f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10e      	bne.n	80022ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	11db      	asrs	r3, r3, #7
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	f003 0306 	and.w	r3, r3, #6
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f063 030f 	orn	r3, r3, #15
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	611a      	str	r2, [r3, #16]
}
 80022cc:	e011      	b.n	80022f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d10d      	bne.n	80022f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	b29b      	uxth	r3, r3
 80022dc:	11db      	asrs	r3, r3, #7
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f003 0306 	and.w	r3, r3, #6
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f063 030e 	orn	r3, r3, #14
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	611a      	str	r2, [r3, #16]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	b2da      	uxtb	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	2b00      	cmp	r3, #0
 8002316:	d004      	beq.n	8002322 <I2C_Master_ADD10+0x26>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00c      	beq.n	8002344 <I2C_Master_ADD10+0x48>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002342:	605a      	str	r2, [r3, #4]
  }
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800234e:	b480      	push	{r7}
 8002350:	b091      	sub	sp, #68	; 0x44
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800235c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b22      	cmp	r3, #34	; 0x22
 8002376:	f040 8174 	bne.w	8002662 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10f      	bne.n	80023a2 <I2C_Master_ADDR+0x54>
 8002382:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002386:	2b40      	cmp	r3, #64	; 0x40
 8002388:	d10b      	bne.n	80023a2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238a:	2300      	movs	r3, #0
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	633b      	str	r3, [r7, #48]	; 0x30
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	e16b      	b.n	800267a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11d      	bne.n	80023e6 <I2C_Master_ADDR+0x98>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80023b2:	d118      	bne.n	80023e6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	651a      	str	r2, [r3, #80]	; 0x50
 80023e4:	e149      	b.n	800267a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d113      	bne.n	8002418 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f0:	2300      	movs	r3, #0
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e120      	b.n	800265a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	f040 808a 	bne.w	8002538 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002426:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800242a:	d137      	bne.n	800249c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800244a:	d113      	bne.n	8002474 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	e0f2      	b.n	800265a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	623b      	str	r3, [r7, #32]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	623b      	str	r3, [r7, #32]
 8002488:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e0de      	b.n	800265a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800249c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d02e      	beq.n	8002500 <I2C_Master_ADDR+0x1b2>
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d02b      	beq.n	8002500 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80024a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024aa:	2b12      	cmp	r3, #18
 80024ac:	d102      	bne.n	80024b4 <I2C_Master_ADDR+0x166>
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d125      	bne.n	8002500 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80024b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d00e      	beq.n	80024d8 <I2C_Master_ADDR+0x18a>
 80024ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d00b      	beq.n	80024d8 <I2C_Master_ADDR+0x18a>
 80024c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d008      	beq.n	80024d8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	e007      	b.n	80024e8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024e6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	e0ac      	b.n	800265a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002510:	2300      	movs	r3, #0
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	61bb      	str	r3, [r7, #24]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	e090      	b.n	800265a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d158      	bne.n	80025f4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002544:	2b04      	cmp	r3, #4
 8002546:	d021      	beq.n	800258c <I2C_Master_ADDR+0x23e>
 8002548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254a:	2b02      	cmp	r3, #2
 800254c:	d01e      	beq.n	800258c <I2C_Master_ADDR+0x23e>
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002550:	2b10      	cmp	r3, #16
 8002552:	d01b      	beq.n	800258c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002562:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e012      	b.n	80025b2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800259a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025c0:	d14b      	bne.n	800265a <I2C_Master_ADDR+0x30c>
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025c8:	d00b      	beq.n	80025e2 <I2C_Master_ADDR+0x294>
 80025ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d008      	beq.n	80025e2 <I2C_Master_ADDR+0x294>
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d005      	beq.n	80025e2 <I2C_Master_ADDR+0x294>
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d002      	beq.n	80025e2 <I2C_Master_ADDR+0x294>
 80025dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d13b      	bne.n	800265a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	e032      	b.n	800265a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002602:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002612:	d117      	bne.n	8002644 <I2C_Master_ADDR+0x2f6>
 8002614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002616:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800261a:	d00b      	beq.n	8002634 <I2C_Master_ADDR+0x2e6>
 800261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261e:	2b01      	cmp	r3, #1
 8002620:	d008      	beq.n	8002634 <I2C_Master_ADDR+0x2e6>
 8002622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002624:	2b08      	cmp	r3, #8
 8002626:	d005      	beq.n	8002634 <I2C_Master_ADDR+0x2e6>
 8002628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262a:	2b10      	cmp	r3, #16
 800262c:	d002      	beq.n	8002634 <I2C_Master_ADDR+0x2e6>
 800262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002630:	2b20      	cmp	r3, #32
 8002632:	d107      	bne.n	8002644 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002642:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002660:	e00b      	b.n	800267a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
}
 8002678:	e7ff      	b.n	800267a <I2C_Master_ADDR+0x32c>
 800267a:	bf00      	nop
 800267c:	3744      	adds	r7, #68	; 0x44
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002692:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d02b      	beq.n	80026f6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	781a      	ldrb	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d114      	bne.n	80026f6 <I2C_SlaveTransmit_TXE+0x72>
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b29      	cmp	r3, #41	; 0x29
 80026d0:	d111      	bne.n	80026f6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2221      	movs	r2, #33	; 0x21
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2228      	movs	r2, #40	; 0x28
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff f9cf 	bl	8001a94 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d011      	beq.n	8002734 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d02c      	beq.n	80027b2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d114      	bne.n	80027b2 <I2C_SlaveReceive_RXNE+0x74>
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b2a      	cmp	r3, #42	; 0x2a
 800278c:	d111      	bne.n	80027b2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800279c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2222      	movs	r2, #34	; 0x22
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2228      	movs	r2, #40	; 0x28
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff f97a 	bl	8001aa6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d012      	beq.n	80027f2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002816:	2b28      	cmp	r3, #40	; 0x28
 8002818:	d127      	bne.n	800286a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002828:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	09db      	lsrs	r3, r3, #7
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d103      	bne.n	800284e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	81bb      	strh	r3, [r7, #12]
 800284c:	e002      	b.n	8002854 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800285c:	89ba      	ldrh	r2, [r7, #12]
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff f928 	bl	8001ab8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002868:	e00e      	b.n	8002888 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ec:	d172      	bne.n	80029d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	2b22      	cmp	r3, #34	; 0x22
 80028f2:	d002      	beq.n	80028fa <I2C_Slave_STOPF+0x6a>
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b2a      	cmp	r3, #42	; 0x2a
 80028f8:	d135      	bne.n	8002966 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f043 0204 	orr.w	r2, r3, #4
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800292c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fb4a 	bl	8000fcc <HAL_DMA_GetState>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d049      	beq.n	80029d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	4a69      	ldr	r2, [pc, #420]	; (8002ae8 <I2C_Slave_STOPF+0x258>)
 8002944:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fac6 	bl	8000edc <HAL_DMA_Abort_IT>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d03d      	beq.n	80029d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002960:	4610      	mov	r0, r2
 8002962:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002964:	e035      	b.n	80029d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	b29a      	uxth	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f043 0204 	orr.w	r2, r3, #4
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002998:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe fb14 	bl	8000fcc <HAL_DMA_GetState>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d014      	beq.n	80029d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ae:	4a4e      	ldr	r2, [pc, #312]	; (8002ae8 <I2C_Slave_STOPF+0x258>)
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fa90 	bl	8000edc <HAL_DMA_Abort_IT>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029cc:	4610      	mov	r0, r2
 80029ce:	4798      	blx	r3
 80029d0:	e000      	b.n	80029d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d03e      	beq.n	8002a5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d112      	bne.n	8002a12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1c:	2b40      	cmp	r3, #64	; 0x40
 8002a1e:	d112      	bne.n	8002a46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f043 0204 	orr.w	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f8b7 	bl	8002bd8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002a6a:	e039      	b.n	8002ae0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a70:	d109      	bne.n	8002a86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2228      	movs	r2, #40	; 0x28
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff f810 	bl	8001aa6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b28      	cmp	r3, #40	; 0x28
 8002a90:	d111      	bne.n	8002ab6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a15      	ldr	r2, [pc, #84]	; (8002aec <I2C_Slave_STOPF+0x25c>)
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff f80f 	bl	8001ad2 <HAL_I2C_ListenCpltCallback>
}
 8002ab4:	e014      	b.n	8002ae0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	2b22      	cmp	r3, #34	; 0x22
 8002abc:	d002      	beq.n	8002ac4 <I2C_Slave_STOPF+0x234>
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	2b22      	cmp	r3, #34	; 0x22
 8002ac2:	d10d      	bne.n	8002ae0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe ffe3 	bl	8001aa6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	08002e3d 	.word	0x08002e3d
 8002aec:	ffff0000 	.word	0xffff0000

08002af0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d002      	beq.n	8002b12 <I2C_Slave_AF+0x22>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d129      	bne.n	8002b66 <I2C_Slave_AF+0x76>
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	2b28      	cmp	r3, #40	; 0x28
 8002b16:	d126      	bne.n	8002b66 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a2e      	ldr	r2, [pc, #184]	; (8002bd4 <I2C_Slave_AF+0xe4>)
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b2c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b36:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b46:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe ffb7 	bl	8001ad2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002b64:	e031      	b.n	8002bca <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	2b21      	cmp	r3, #33	; 0x21
 8002b6a:	d129      	bne.n	8002bc0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a19      	ldr	r2, [pc, #100]	; (8002bd4 <I2C_Slave_AF+0xe4>)
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2221      	movs	r2, #33	; 0x21
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b96:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ba0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe fd28 	bl	8001608 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7fe ff6b 	bl	8001a94 <HAL_I2C_SlaveTxCpltCallback>
}
 8002bbe:	e004      	b.n	8002bca <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bc8:	615a      	str	r2, [r3, #20]
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	ffff0000 	.word	0xffff0000

08002bd8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002bf0:	7bbb      	ldrb	r3, [r7, #14]
 8002bf2:	2b10      	cmp	r3, #16
 8002bf4:	d002      	beq.n	8002bfc <I2C_ITError+0x24>
 8002bf6:	7bbb      	ldrb	r3, [r7, #14]
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d10a      	bne.n	8002c12 <I2C_ITError+0x3a>
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b22      	cmp	r3, #34	; 0x22
 8002c00:	d107      	bne.n	8002c12 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c10:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c18:	2b28      	cmp	r3, #40	; 0x28
 8002c1a:	d107      	bne.n	8002c2c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2228      	movs	r2, #40	; 0x28
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c2a:	e015      	b.n	8002c58 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3a:	d00a      	beq.n	8002c52 <I2C_ITError+0x7a>
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b60      	cmp	r3, #96	; 0x60
 8002c40:	d007      	beq.n	8002c52 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c66:	d162      	bne.n	8002d2e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c76:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d020      	beq.n	8002cc8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	4a6a      	ldr	r2, [pc, #424]	; (8002e34 <I2C_ITError+0x25c>)
 8002c8c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe f922 	bl	8000edc <HAL_DMA_Abort_IT>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8089 	beq.w	8002db2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4798      	blx	r3
 8002cc6:	e074      	b.n	8002db2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	4a59      	ldr	r2, [pc, #356]	; (8002e34 <I2C_ITError+0x25c>)
 8002cce:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe f901 	bl	8000edc <HAL_DMA_Abort_IT>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d068      	beq.n	8002db2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cea:	2b40      	cmp	r3, #64	; 0x40
 8002cec:	d10b      	bne.n	8002d06 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4798      	blx	r3
 8002d2c:	e041      	b.n	8002db2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b60      	cmp	r3, #96	; 0x60
 8002d38:	d125      	bne.n	8002d86 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d10b      	bne.n	8002d6e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe fecb 	bl	8001b1a <HAL_I2C_AbortCpltCallback>
 8002d84:	e015      	b.n	8002db2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d10b      	bne.n	8002dac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7fe feab 	bl	8001b08 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10e      	bne.n	8002de0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d113      	bne.n	8002e2c <I2C_ITError+0x254>
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b28      	cmp	r3, #40	; 0x28
 8002e08:	d110      	bne.n	8002e2c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <I2C_ITError+0x260>)
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe fe53 	bl	8001ad2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	08002e3d 	.word	0x08002e3d
 8002e38:	ffff0000 	.word	0xffff0000

08002e3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e56:	4b4b      	ldr	r3, [pc, #300]	; (8002f84 <I2C_DMAAbort+0x148>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	08db      	lsrs	r3, r3, #3
 8002e5c:	4a4a      	ldr	r2, [pc, #296]	; (8002f88 <I2C_DMAAbort+0x14c>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	0a1a      	lsrs	r2, r3, #8
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00da      	lsls	r2, r3, #3
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f043 0220 	orr.w	r2, r3, #32
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002e82:	e00a      	b.n	8002e9a <I2C_DMAAbort+0x5e>
    }
    count--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e98:	d0ea      	beq.n	8002e70 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	2200      	movs	r2, #0
 8002ede:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	2200      	movs	r2, #0
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b60      	cmp	r3, #96	; 0x60
 8002f0a:	d10e      	bne.n	8002f2a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f7fe fdf9 	bl	8001b1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f28:	e027      	b.n	8002f7a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f2a:	7cfb      	ldrb	r3, [r7, #19]
 8002f2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f30:	2b28      	cmp	r3, #40	; 0x28
 8002f32:	d117      	bne.n	8002f64 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2228      	movs	r2, #40	; 0x28
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f62:	e007      	b.n	8002f74 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002f74:	6978      	ldr	r0, [r7, #20]
 8002f76:	f7fe fdc7 	bl	8001b08 <HAL_I2C_ErrorCallback>
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000018 	.word	0x20000018
 8002f88:	14f8b589 	.word	0x14f8b589

08002f8c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	08db      	lsrs	r3, r3, #3
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	0a1a      	lsrs	r2, r3, #8
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d107      	bne.n	8002fca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f043 0220 	orr.w	r2, r3, #32
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e008      	b.n	8002fdc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd8:	d0e9      	beq.n	8002fae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000018 	.word	0x20000018
 8002fec:	14f8b589 	.word	0x14f8b589

08002ff0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003000:	d103      	bne.n	800300a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003008:	e007      	b.n	800301a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003012:	d102      	bne.n	800301a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2208      	movs	r2, #8
 8003018:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e26c      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 8087 	beq.w	8003152 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003044:	4b92      	ldr	r3, [pc, #584]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 030c 	and.w	r3, r3, #12
 800304c:	2b04      	cmp	r3, #4
 800304e:	d00c      	beq.n	800306a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003050:	4b8f      	ldr	r3, [pc, #572]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b08      	cmp	r3, #8
 800305a:	d112      	bne.n	8003082 <HAL_RCC_OscConfig+0x5e>
 800305c:	4b8c      	ldr	r3, [pc, #560]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003068:	d10b      	bne.n	8003082 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306a:	4b89      	ldr	r3, [pc, #548]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d06c      	beq.n	8003150 <HAL_RCC_OscConfig+0x12c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d168      	bne.n	8003150 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e246      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x76>
 800308c:	4b80      	ldr	r3, [pc, #512]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a7f      	ldr	r2, [pc, #508]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	e02e      	b.n	80030f8 <HAL_RCC_OscConfig+0xd4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0x98>
 80030a2:	4b7b      	ldr	r3, [pc, #492]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a7a      	ldr	r2, [pc, #488]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b78      	ldr	r3, [pc, #480]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a77      	ldr	r2, [pc, #476]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e01d      	b.n	80030f8 <HAL_RCC_OscConfig+0xd4>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0xbc>
 80030c6:	4b72      	ldr	r3, [pc, #456]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a71      	ldr	r2, [pc, #452]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b6f      	ldr	r3, [pc, #444]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6e      	ldr	r2, [pc, #440]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e00b      	b.n	80030f8 <HAL_RCC_OscConfig+0xd4>
 80030e0:	4b6b      	ldr	r3, [pc, #428]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a6a      	ldr	r2, [pc, #424]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b68      	ldr	r3, [pc, #416]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a67      	ldr	r2, [pc, #412]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d013      	beq.n	8003128 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fd fdd4 	bl	8000cac <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003108:	f7fd fdd0 	bl	8000cac <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	; 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1fa      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b5d      	ldr	r3, [pc, #372]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0xe4>
 8003126:	e014      	b.n	8003152 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fd fdc0 	bl	8000cac <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003130:	f7fd fdbc 	bl	8000cac <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	; 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1e6      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	4b53      	ldr	r3, [pc, #332]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x10c>
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d063      	beq.n	8003226 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800315e:	4b4c      	ldr	r3, [pc, #304]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800316a:	4b49      	ldr	r3, [pc, #292]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b08      	cmp	r3, #8
 8003174:	d11c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x18c>
 8003176:	4b46      	ldr	r3, [pc, #280]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d116      	bne.n	80031b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003182:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_RCC_OscConfig+0x176>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e1ba      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319a:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4939      	ldr	r1, [pc, #228]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ae:	e03a      	b.n	8003226 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b8:	4b36      	ldr	r3, [pc, #216]	; (8003294 <HAL_RCC_OscConfig+0x270>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fd fd75 	bl	8000cac <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c6:	f7fd fd71 	bl	8000cac <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e19b      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e4:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4927      	ldr	r1, [pc, #156]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
 80031f8:	e015      	b.n	8003226 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fa:	4b26      	ldr	r3, [pc, #152]	; (8003294 <HAL_RCC_OscConfig+0x270>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fd fd54 	bl	8000cac <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003208:	f7fd fd50 	bl	8000cac <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e17a      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d03a      	beq.n	80032a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d019      	beq.n	800326e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323a:	4b17      	ldr	r3, [pc, #92]	; (8003298 <HAL_RCC_OscConfig+0x274>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003240:	f7fd fd34 	bl	8000cac <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003248:	f7fd fd30 	bl	8000cac <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e15a      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003266:	2001      	movs	r0, #1
 8003268:	f000 fab8 	bl	80037dc <RCC_Delay>
 800326c:	e01c      	b.n	80032a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <HAL_RCC_OscConfig+0x274>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003274:	f7fd fd1a 	bl	8000cac <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327a:	e00f      	b.n	800329c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327c:	f7fd fd16 	bl	8000cac <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d908      	bls.n	800329c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e140      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
 8003294:	42420000 	.word	0x42420000
 8003298:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329c:	4b9e      	ldr	r3, [pc, #632]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e9      	bne.n	800327c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80a6 	beq.w	8003402 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ba:	4b97      	ldr	r3, [pc, #604]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10d      	bne.n	80032e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	4b94      	ldr	r3, [pc, #592]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	4a93      	ldr	r2, [pc, #588]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	61d3      	str	r3, [r2, #28]
 80032d2:	4b91      	ldr	r3, [pc, #580]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	4b8e      	ldr	r3, [pc, #568]	; (800351c <HAL_RCC_OscConfig+0x4f8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d118      	bne.n	8003320 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ee:	4b8b      	ldr	r3, [pc, #556]	; (800351c <HAL_RCC_OscConfig+0x4f8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a8a      	ldr	r2, [pc, #552]	; (800351c <HAL_RCC_OscConfig+0x4f8>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fa:	f7fd fcd7 	bl	8000cac <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003302:	f7fd fcd3 	bl	8000cac <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b64      	cmp	r3, #100	; 0x64
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e0fd      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003314:	4b81      	ldr	r3, [pc, #516]	; (800351c <HAL_RCC_OscConfig+0x4f8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x312>
 8003328:	4b7b      	ldr	r3, [pc, #492]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4a7a      	ldr	r2, [pc, #488]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6213      	str	r3, [r2, #32]
 8003334:	e02d      	b.n	8003392 <HAL_RCC_OscConfig+0x36e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x334>
 800333e:	4b76      	ldr	r3, [pc, #472]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4a75      	ldr	r2, [pc, #468]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 8003344:	f023 0301 	bic.w	r3, r3, #1
 8003348:	6213      	str	r3, [r2, #32]
 800334a:	4b73      	ldr	r3, [pc, #460]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	4a72      	ldr	r2, [pc, #456]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	6213      	str	r3, [r2, #32]
 8003356:	e01c      	b.n	8003392 <HAL_RCC_OscConfig+0x36e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d10c      	bne.n	800337a <HAL_RCC_OscConfig+0x356>
 8003360:	4b6d      	ldr	r3, [pc, #436]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	4a6c      	ldr	r2, [pc, #432]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 8003366:	f043 0304 	orr.w	r3, r3, #4
 800336a:	6213      	str	r3, [r2, #32]
 800336c:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	4a69      	ldr	r2, [pc, #420]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6213      	str	r3, [r2, #32]
 8003378:	e00b      	b.n	8003392 <HAL_RCC_OscConfig+0x36e>
 800337a:	4b67      	ldr	r3, [pc, #412]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	4a66      	ldr	r2, [pc, #408]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6213      	str	r3, [r2, #32]
 8003386:	4b64      	ldr	r3, [pc, #400]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	4a63      	ldr	r2, [pc, #396]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 800338c:	f023 0304 	bic.w	r3, r3, #4
 8003390:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d015      	beq.n	80033c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339a:	f7fd fc87 	bl	8000cac <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a0:	e00a      	b.n	80033b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f7fd fc83 	bl	8000cac <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e0ab      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b8:	4b57      	ldr	r3, [pc, #348]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ee      	beq.n	80033a2 <HAL_RCC_OscConfig+0x37e>
 80033c4:	e014      	b.n	80033f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c6:	f7fd fc71 	bl	8000cac <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fd fc6d 	bl	8000cac <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e095      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e4:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ee      	bne.n	80033ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f6:	4b48      	ldr	r3, [pc, #288]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	4a47      	ldr	r2, [pc, #284]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 80033fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003400:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8081 	beq.w	800350e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800340c:	4b42      	ldr	r3, [pc, #264]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d061      	beq.n	80034dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d146      	bne.n	80034ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003420:	4b3f      	ldr	r3, [pc, #252]	; (8003520 <HAL_RCC_OscConfig+0x4fc>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fd fc41 	bl	8000cac <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342e:	f7fd fc3d 	bl	8000cac <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e067      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003440:	4b35      	ldr	r3, [pc, #212]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003454:	d108      	bne.n	8003468 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003456:	4b30      	ldr	r3, [pc, #192]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	492d      	ldr	r1, [pc, #180]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003468:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a19      	ldr	r1, [r3, #32]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	430b      	orrs	r3, r1
 800347a:	4927      	ldr	r1, [pc, #156]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003480:	4b27      	ldr	r3, [pc, #156]	; (8003520 <HAL_RCC_OscConfig+0x4fc>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fd fc11 	bl	8000cac <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348e:	f7fd fc0d 	bl	8000cac <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e037      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x46a>
 80034ac:	e02f      	b.n	800350e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ae:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <HAL_RCC_OscConfig+0x4fc>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fd fbfa 	bl	8000cac <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fd fbf6 	bl	8000cac <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e020      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x498>
 80034da:	e018      	b.n	800350e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e013      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_OscConfig+0x4f4>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d106      	bne.n	800350a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d001      	beq.n	800350e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	40007000 	.word	0x40007000
 8003520:	42420060 	.word	0x42420060

08003524 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0d0      	b.n	80036da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003538:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <HAL_RCC_ClockConfig+0x1c0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d910      	bls.n	8003568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b67      	ldr	r3, [pc, #412]	; (80036e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 0207 	bic.w	r2, r3, #7
 800354e:	4965      	ldr	r1, [pc, #404]	; (80036e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b63      	ldr	r3, [pc, #396]	; (80036e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0b8      	b.n	80036da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d020      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003580:	4b59      	ldr	r3, [pc, #356]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4a58      	ldr	r2, [pc, #352]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800358a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003598:	4b53      	ldr	r3, [pc, #332]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a52      	ldr	r2, [pc, #328]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a4:	4b50      	ldr	r3, [pc, #320]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	494d      	ldr	r1, [pc, #308]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d040      	beq.n	8003644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d107      	bne.n	80035da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d115      	bne.n	8003602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e07f      	b.n	80036da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d107      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e2:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e073      	b.n	80036da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f2:	4b3d      	ldr	r3, [pc, #244]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e06b      	b.n	80036da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003602:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f023 0203 	bic.w	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	4936      	ldr	r1, [pc, #216]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003614:	f7fd fb4a 	bl	8000cac <HAL_GetTick>
 8003618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361a:	e00a      	b.n	8003632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800361c:	f7fd fb46 	bl	8000cac <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	; 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e053      	b.n	80036da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003632:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 020c 	and.w	r2, r3, #12
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	429a      	cmp	r2, r3
 8003642:	d1eb      	bne.n	800361c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003644:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d210      	bcs.n	8003674 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 0207 	bic.w	r2, r3, #7
 800365a:	4922      	ldr	r1, [pc, #136]	; (80036e4 <HAL_RCC_ClockConfig+0x1c0>)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e032      	b.n	80036da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4916      	ldr	r1, [pc, #88]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	4313      	orrs	r3, r2
 8003690:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	490e      	ldr	r1, [pc, #56]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036b2:	f000 f821 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80036b6:	4602      	mov	r2, r0
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	490a      	ldr	r1, [pc, #40]	; (80036ec <HAL_RCC_ClockConfig+0x1c8>)
 80036c4:	5ccb      	ldrb	r3, [r1, r3]
 80036c6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ca:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <HAL_RCC_ClockConfig+0x1cc>)
 80036cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ce:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <HAL_RCC_ClockConfig+0x1d0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd faa8 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40022000 	.word	0x40022000
 80036e8:	40021000 	.word	0x40021000
 80036ec:	0800406c 	.word	0x0800406c
 80036f0:	20000018 	.word	0x20000018
 80036f4:	2000001c 	.word	0x2000001c

080036f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003712:	4b1e      	ldr	r3, [pc, #120]	; (800378c <HAL_RCC_GetSysClockFreq+0x94>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b04      	cmp	r3, #4
 8003720:	d002      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x30>
 8003722:	2b08      	cmp	r3, #8
 8003724:	d003      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0x36>
 8003726:	e027      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <HAL_RCC_GetSysClockFreq+0x98>)
 800372a:	613b      	str	r3, [r7, #16]
      break;
 800372c:	e027      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	0c9b      	lsrs	r3, r3, #18
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	4a17      	ldr	r2, [pc, #92]	; (8003794 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003738:	5cd3      	ldrb	r3, [r2, r3]
 800373a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d010      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003746:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_RCC_GetSysClockFreq+0x94>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	0c5b      	lsrs	r3, r3, #17
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	4a11      	ldr	r2, [pc, #68]	; (8003798 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003752:	5cd3      	ldrb	r3, [r2, r3]
 8003754:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a0d      	ldr	r2, [pc, #52]	; (8003790 <HAL_RCC_GetSysClockFreq+0x98>)
 800375a:	fb02 f203 	mul.w	r2, r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e004      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a0c      	ldr	r2, [pc, #48]	; (800379c <HAL_RCC_GetSysClockFreq+0xa4>)
 800376c:	fb02 f303 	mul.w	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	613b      	str	r3, [r7, #16]
      break;
 8003776:	e002      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_RCC_GetSysClockFreq+0x98>)
 800377a:	613b      	str	r3, [r7, #16]
      break;
 800377c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800377e:	693b      	ldr	r3, [r7, #16]
}
 8003780:	4618      	mov	r0, r3
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000
 8003790:	007a1200 	.word	0x007a1200
 8003794:	08004084 	.word	0x08004084
 8003798:	08004094 	.word	0x08004094
 800379c:	003d0900 	.word	0x003d0900

080037a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a4:	4b02      	ldr	r3, [pc, #8]	; (80037b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	20000018 	.word	0x20000018

080037b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037b8:	f7ff fff2 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4903      	ldr	r1, [pc, #12]	; (80037d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	0800407c 	.word	0x0800407c

080037dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037e4:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <RCC_Delay+0x34>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <RCC_Delay+0x38>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	0a5b      	lsrs	r3, r3, #9
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037f8:	bf00      	nop
  }
  while (Delay --);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1e5a      	subs	r2, r3, #1
 80037fe:	60fa      	str	r2, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f9      	bne.n	80037f8 <RCC_Delay+0x1c>
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	20000018 	.word	0x20000018
 8003814:	10624dd3 	.word	0x10624dd3

08003818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e041      	b.n	80038ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fd f8d6 	bl	80009f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3304      	adds	r3, #4
 8003854:	4619      	mov	r1, r3
 8003856:	4610      	mov	r0, r2
 8003858:	f000 fa5c 	bl	8003d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d001      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e03a      	b.n	8003946 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_TIM_Base_Start_IT+0x98>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00e      	beq.n	8003910 <HAL_TIM_Base_Start_IT+0x58>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fa:	d009      	beq.n	8003910 <HAL_TIM_Base_Start_IT+0x58>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a14      	ldr	r2, [pc, #80]	; (8003954 <HAL_TIM_Base_Start_IT+0x9c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <HAL_TIM_Base_Start_IT+0x58>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a13      	ldr	r2, [pc, #76]	; (8003958 <HAL_TIM_Base_Start_IT+0xa0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d111      	bne.n	8003934 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b06      	cmp	r3, #6
 8003920:	d010      	beq.n	8003944 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003932:	e007      	b.n	8003944 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	40012c00 	.word	0x40012c00
 8003954:	40000400 	.word	0x40000400
 8003958:	40000800 	.word	0x40000800

0800395c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d020      	beq.n	80039c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01b      	beq.n	80039c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0202 	mvn.w	r2, #2
 8003990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f998 	bl	8003cdc <HAL_TIM_IC_CaptureCallback>
 80039ac:	e005      	b.n	80039ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f98b 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f99a 	bl	8003cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d020      	beq.n	8003a0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01b      	beq.n	8003a0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0204 	mvn.w	r2, #4
 80039dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f972 	bl	8003cdc <HAL_TIM_IC_CaptureCallback>
 80039f8:	e005      	b.n	8003a06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f965 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f974 	bl	8003cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d020      	beq.n	8003a58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01b      	beq.n	8003a58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0208 	mvn.w	r2, #8
 8003a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f94c 	bl	8003cdc <HAL_TIM_IC_CaptureCallback>
 8003a44:	e005      	b.n	8003a52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f93f 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f94e 	bl	8003cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d020      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01b      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0210 	mvn.w	r2, #16
 8003a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2208      	movs	r2, #8
 8003a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f926 	bl	8003cdc <HAL_TIM_IC_CaptureCallback>
 8003a90:	e005      	b.n	8003a9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f919 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f928 	bl	8003cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0201 	mvn.w	r2, #1
 8003ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fc fea8 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00c      	beq.n	8003aec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d007      	beq.n	8003aec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa7f 	bl	8003fea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00c      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8f8 	bl	8003d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00c      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0220 	mvn.w	r2, #32
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa52 	bl	8003fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_TIM_ConfigClockSource+0x1c>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e0b4      	b.n	8003cc2 <HAL_TIM_ConfigClockSource+0x186>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b90:	d03e      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0xd4>
 8003b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b96:	f200 8087 	bhi.w	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	f000 8086 	beq.w	8003cae <HAL_TIM_ConfigClockSource+0x172>
 8003ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba6:	d87f      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba8:	2b70      	cmp	r3, #112	; 0x70
 8003baa:	d01a      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0xa6>
 8003bac:	2b70      	cmp	r3, #112	; 0x70
 8003bae:	d87b      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb0:	2b60      	cmp	r3, #96	; 0x60
 8003bb2:	d050      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x11a>
 8003bb4:	2b60      	cmp	r3, #96	; 0x60
 8003bb6:	d877      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b50      	cmp	r3, #80	; 0x50
 8003bba:	d03c      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0xfa>
 8003bbc:	2b50      	cmp	r3, #80	; 0x50
 8003bbe:	d873      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d058      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0x13a>
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	d86f      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b30      	cmp	r3, #48	; 0x30
 8003bca:	d064      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x15a>
 8003bcc:	2b30      	cmp	r3, #48	; 0x30
 8003bce:	d86b      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	d060      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x15a>
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d867      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d05c      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x15a>
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d05a      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x15a>
 8003be0:	e062      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6899      	ldr	r1, [r3, #8]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f000 f974 	bl	8003ede <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	609a      	str	r2, [r3, #8]
      break;
 8003c0e:	e04f      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6899      	ldr	r1, [r3, #8]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f000 f95d 	bl	8003ede <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c32:	609a      	str	r2, [r3, #8]
      break;
 8003c34:	e03c      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6859      	ldr	r1, [r3, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	461a      	mov	r2, r3
 8003c44:	f000 f8d4 	bl	8003df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2150      	movs	r1, #80	; 0x50
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f92b 	bl	8003eaa <TIM_ITRx_SetConfig>
      break;
 8003c54:	e02c      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6859      	ldr	r1, [r3, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f000 f8f2 	bl	8003e4c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2160      	movs	r1, #96	; 0x60
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f91b 	bl	8003eaa <TIM_ITRx_SetConfig>
      break;
 8003c74:	e01c      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	461a      	mov	r2, r3
 8003c84:	f000 f8b4 	bl	8003df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2140      	movs	r1, #64	; 0x40
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f90b 	bl	8003eaa <TIM_ITRx_SetConfig>
      break;
 8003c94:	e00c      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f000 f902 	bl	8003eaa <TIM_ITRx_SetConfig>
      break;
 8003ca6:	e003      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cac:	e000      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr
	...

08003d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a2f      	ldr	r2, [pc, #188]	; (8003de4 <TIM_Base_SetConfig+0xd0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00b      	beq.n	8003d44 <TIM_Base_SetConfig+0x30>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d32:	d007      	beq.n	8003d44 <TIM_Base_SetConfig+0x30>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a2c      	ldr	r2, [pc, #176]	; (8003de8 <TIM_Base_SetConfig+0xd4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_Base_SetConfig+0x30>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a2b      	ldr	r2, [pc, #172]	; (8003dec <TIM_Base_SetConfig+0xd8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d108      	bne.n	8003d56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <TIM_Base_SetConfig+0xd0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00b      	beq.n	8003d76 <TIM_Base_SetConfig+0x62>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d64:	d007      	beq.n	8003d76 <TIM_Base_SetConfig+0x62>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <TIM_Base_SetConfig+0xd4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d003      	beq.n	8003d76 <TIM_Base_SetConfig+0x62>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <TIM_Base_SetConfig+0xd8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d108      	bne.n	8003d88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a0d      	ldr	r2, [pc, #52]	; (8003de4 <TIM_Base_SetConfig+0xd0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d103      	bne.n	8003dbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f023 0201 	bic.w	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	611a      	str	r2, [r3, #16]
  }
}
 8003dda:	bf00      	nop
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800

08003df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f023 0201 	bic.w	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f023 030a 	bic.w	r3, r3, #10
 8003e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	f023 0210 	bic.w	r2, r3, #16
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	031b      	lsls	r3, r3, #12
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	621a      	str	r2, [r3, #32]
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f043 0307 	orr.w	r3, r3, #7
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	609a      	str	r2, [r3, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b087      	sub	sp, #28
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	021a      	lsls	r2, r3, #8
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	609a      	str	r2, [r3, #8]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e046      	b.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a16      	ldr	r2, [pc, #88]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00e      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f80:	d009      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a10      	ldr	r2, [pc, #64]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d10c      	bne.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr
 8003fcc:	40012c00 	.word	0x40012c00
 8003fd0:	40000400 	.word	0x40000400
 8003fd4:	40000800 	.word	0x40000800

08003fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr

08003fea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <__libc_init_array>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	2600      	movs	r6, #0
 8004000:	4d0c      	ldr	r5, [pc, #48]	; (8004034 <__libc_init_array+0x38>)
 8004002:	4c0d      	ldr	r4, [pc, #52]	; (8004038 <__libc_init_array+0x3c>)
 8004004:	1b64      	subs	r4, r4, r5
 8004006:	10a4      	asrs	r4, r4, #2
 8004008:	42a6      	cmp	r6, r4
 800400a:	d109      	bne.n	8004020 <__libc_init_array+0x24>
 800400c:	f000 f822 	bl	8004054 <_init>
 8004010:	2600      	movs	r6, #0
 8004012:	4d0a      	ldr	r5, [pc, #40]	; (800403c <__libc_init_array+0x40>)
 8004014:	4c0a      	ldr	r4, [pc, #40]	; (8004040 <__libc_init_array+0x44>)
 8004016:	1b64      	subs	r4, r4, r5
 8004018:	10a4      	asrs	r4, r4, #2
 800401a:	42a6      	cmp	r6, r4
 800401c:	d105      	bne.n	800402a <__libc_init_array+0x2e>
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	f855 3b04 	ldr.w	r3, [r5], #4
 8004024:	4798      	blx	r3
 8004026:	3601      	adds	r6, #1
 8004028:	e7ee      	b.n	8004008 <__libc_init_array+0xc>
 800402a:	f855 3b04 	ldr.w	r3, [r5], #4
 800402e:	4798      	blx	r3
 8004030:	3601      	adds	r6, #1
 8004032:	e7f2      	b.n	800401a <__libc_init_array+0x1e>
 8004034:	08004098 	.word	0x08004098
 8004038:	08004098 	.word	0x08004098
 800403c:	08004098 	.word	0x08004098
 8004040:	0800409c 	.word	0x0800409c

08004044 <memset>:
 8004044:	4603      	mov	r3, r0
 8004046:	4402      	add	r2, r0
 8004048:	4293      	cmp	r3, r2
 800404a:	d100      	bne.n	800404e <memset+0xa>
 800404c:	4770      	bx	lr
 800404e:	f803 1b01 	strb.w	r1, [r3], #1
 8004052:	e7f9      	b.n	8004048 <memset+0x4>

08004054 <_init>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	bf00      	nop
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr

08004060 <_fini>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	bf00      	nop
 8004064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004066:	bc08      	pop	{r3}
 8004068:	469e      	mov	lr, r3
 800406a:	4770      	bx	lr
